(rule
 (targets coqtop-prelude)
 (deps
  %{bin:coqtop}
  %{project_root}/theories/Init/Prelude.vo)
 (action
  (with-stdout-to coqtop-prelude
   (progn
    (echo "#!/usr/bin/env bash\n")
    (bash "echo \"$(pwd)/%{bin:coqtop} -coqlib $(pwd)/%{project_root}\" \\$@")
    (run chmod +x %{targets})))))

(rule
 (targets coqc-prelude)
 (deps
  %{bin:coqc}
  %{project_root}/theories/Init/Prelude.vo)
 (action
  (with-stdout-to coqc-prelude
   (progn
    (echo "#!/usr/bin/env bash\n")
    (bash "echo \"$(pwd)/%{bin:coqc} -coqlib $(pwd)/%{project_root}\" \\$@")
    (run chmod +x %{targets})))))

(rule
 (targets coqbyte-prelude)
 (deps
  %{bin:coqtop.byte}
  %{lib:coq.kernel:../../stublibs/dllbyterun_stubs.so}
  %{project_root}/theories/Init/Prelude.vo)
 (action
  (with-stdout-to %{targets}
   (progn
    (echo "#!/usr/bin/env bash\n")
    (bash "echo \"$(pwd)/%{bin:coqtop.byte} -coqlib $(pwd)/%{project_root}\" \\$@")
    (run chmod +x %{targets})))))

(rule
 (targets utop-prelude)
 (deps
  %{project_root}/topbin/coqtop_utop_bin.exe
  %{lib:coq.kernel:../../stublibs/dllbyterun_stubs.so}
  %{lib:coq.plugins.ltac:ltac_plugin.cma}
  %{lib:coq.plugins.tauto:tauto_plugin.cma}
  %{lib:coq.plugins.string_notation:string_notation_plugin.cma}
  %{lib:coq.plugins.numeral_notation:numeral_notation_plugin.cma}
  %{lib:coq.plugins.cc:cc_plugin.cma}
  %{lib:coq.plugins.firstorder:ground_plugin.cma}
  %{project_root}/theories/Init/Prelude.vo)
 (action
  (with-stdout-to utop-prelude
   (progn
    (echo "#!/usr/bin/env bash\n")
    (bash "echo \"$(pwd)/%{project_root}/topbin/coqtop_utop_bin.exe -coqlib $(pwd)/%{project_root}\" \\$@")
    (run chmod +x %{targets})))))

(rule
 (targets coqide-prelude)
 (deps
  %{bin:coqqueryworker.opt}
  %{bin:coqtacticworker.opt}
  %{bin:coqproofworker.opt}
  %{project_root}/theories/Init/Prelude.vo
  %{project_root}/coqide-server.install
  %{project_root}/coqide.install)
 (action
  (with-stdout-to coqide-prelude
   (progn
    (echo "#!/usr/bin/env bash\n")
    (bash "echo \"$(pwd)/%{bin:coqide} -coqlib $(pwd)/%{project_root}\" \\$@")
    (run chmod +x %{targets})))))
