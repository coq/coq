##########################################################################
##         #   The Coq Proof Assistant / The Coq Development Team       ##
##  v      #         Copyright INRIA, CNRS and contributors             ##
## <O___,, # (see version control and CREDITS file for authors & dates) ##
##   \VV/  ###############################################################
##    //   #    This file is distributed under the terms of the         ##
##         #     GNU Lesser General Public License Version 2.1          ##
##         #     (see LICENSE file for the text of the license)         ##
##########################################################################

CI_TARGETS= \
    ci-itauto \
    ci-aac_tactics \
    ci-argosy \
    ci-async_test \
    ci-atbr \
    ci-autosubst \
    ci-autosubst_ocaml \
    ci-bbv \
    ci-bedrock2 \
    ci-bignums \
    ci-category_theory \
    ci-ceres \
    ci-coinduction \
    ci-color \
    ci-compcert \
    ci-coq_dpdgraph \
    ci-coqtail \
    ci-coquelicot \
    ci-coqutil \
    ci-corn \
    ci-cross_crypto \
    ci-coq_library_undecidability \
    ci-coq_lsp \
    ci-coq_performance_tests \
    ci-coq_tools \
    ci-coqprime \
    ci-deriving \
    ci-elpi \
    ci-elpi_test \
    ci-hb \
    ci-hb_test \
    ci-engine_bench \
    ci-ext_lib \
    ci-equations \
    ci-equations_test \
    ci-fcsl_pcm \
    ci-fiat_crypto \
    ci-fiat_crypto_legacy \
    ci-fiat_crypto_ocaml \
    ci-fiat_parsers \
    ci-flocq \
    ci-fourcolor \
    ci-coqhammer \
    ci-hott \
    ci-http \
    ci-iris \
    ci-itree \
    ci-itree_io \
    ci-jasmin \
    ci-json \
    ci-kami \
    ci-lean_importer \
    ci-ltac2_compiler \
    ci-math_classes \
    ci-mathcomp_1 \
    ci-mathcomp \
    ci-mathcomp_test \
    ci-mathcomp_word \
    ci-mczify \
    ci-finmap \
    ci-bigenough \
    ci-analysis \
    ci-menhir \
    ci-metacoq \
    ci-mtac2 \
    ci-neural_net_interp \
    ci-oddorder \
    ci-paco \
    ci-paramcoq \
    ci-parsec \
    ci-perennial \
    ci-quickchick \
    ci-quickchick_test \
    ci-reduction_effects \
    ci-relation_algebra \
    ci-rewriter \
    ci-riscv_coq \
    ci-rupicola \
    ci-serapi \
    ci-serapi_test \
    ci-sf \
    ci-simple_io \
    ci-smtcoq \
    ci-smtcoq_trakt \
    ci-sniper \
    ci-stalmarck \
    ci-stdlib2 \
    ci-tactician \
    ci-tlc \
    ci-trakt \
    ci-unimath \
    ci-unicoq \
    ci-verdi_raft \
    ci-vscoq \
    ci-vst \
    ci-waterproof

CI_VIRTUAL_TARGETS= \
    ci-elpi_hb

.PHONY: ci-all $(CI_TARGETS) $(CI_VIRTUAL_TARGETS)

ci-help:
	echo '*** Coq CI system, please specify a target to build.'
	false

ci-all: $(CI_TARGETS)

ci-category_theory: ci-equations

ci-color: ci-bignums

ci-mathcomp: ci-elpi_hb

ci-coqprime: ci-bignums
ci-coquelicot: ci-mathcomp
ci-deriving: ci-mathcomp
ci-math_classes: ci-bignums

ci-corn: ci-math_classes

ci-coq_library_undecidability: ci-metacoq

ci-mtac2: ci-unicoq

ci-riscv_coq: ci-coqutil
ci-bedrock2: ci-coqutil ci-riscv_coq ci-kami
ci-rupicola: ci-bedrock2 ci-coqutil
ci-fiat_crypto: ci-coqprime ci-rewriter ci-bedrock2 ci-coqutil ci-rupicola
ci-fiat_crypto_ocaml: ci-fiat_crypto

ci-fourcolor: ci-mathcomp
ci-oddorder: ci-mathcomp
ci-fcsl_pcm: ci-mathcomp_1
ci-mczify: ci-mathcomp
ci-mathcomp_test: ci-mathcomp
ci-mathcomp_word: ci-mathcomp_1
ci-finmap: ci-mathcomp
ci-bigenough: ci-mathcomp
ci-analysis: ci-elpi_hb ci-finmap ci-bigenough

ci-hb: ci-elpi

ci-elpi_test: ci-elpi_hb
ci-hb_test: ci-elpi_hb

ci-trakt: ci-elpi

ci-jasmin: ci-mathcomp_word

ci-iris: ci-autosubst

ci-simple_io: ci-ext_lib
ci-quickchick: ci-ext_lib ci-simple_io ci-mathcomp_1
ci-quickchick_test: ci-quickchick
ci-itree: ci-ext_lib ci-paco
ci-itree_io: ci-itree ci-simple_io

ci-parsec: ci-ext_lib ci-ceres
ci-json: ci-parsec ci-menhir
ci-async_test: ci-itree_io ci-json ci-quickchick
ci-http: ci-async_test

ci-equations_test: ci-equations

ci-metacoq: ci-equations

ci-vst: ci-compcert

ci-compcert: ci-menhir ci-flocq

ci-relation_algebra: ci-aac_tactics ci-mathcomp

ci-serapi: ci-coq_lsp

ci-smtcoq_trakt: ci-trakt

# Virtual targets used by the CI to group compilation of rules in a single job

ci-elpi_hb: ci-elpi ci-hb

ci-sniper: ci-smtcoq_trakt

# Generic rule, we use make to ease CI integration
$(CI_TARGETS): ci-%:
	+./dev/ci/ci-wrapper.sh $*

# if we do eg "make states ci-foo", ci-foo will wait for states
# if we just do "make ci-foo" it will just run ci-foo
# (technically the ci-* targets depend on world but it can be
# convenient to run them with less than world compiled)
NON_CI_GOALS:=$(strip $(filter-out ci-%,$(MAKECMDGOALS)))
ifneq (,$(NON_CI_GOALS))
$(CI_TARGETS): $(NON_CI_GOALS)
$(CI_VIRTUAL_TARGETS): $(NON_CI_GOALS)
endif

# For emacs:
# Local Variables:
# mode: makefile
# End:
