image: "$IMAGE"

stages:
  - docker
  - build
  - test
  - deploy

# some default values
variables:
  # Format: $IMAGE-V$DATE [Cache is not used as of today but kept here
  # for reference]
  CACHEKEY: "bionic_coq-V2019-03-12-V8"
  IMAGE: "$CI_REGISTRY_IMAGE:$CACHEKEY"
  # By default, jobs run in the base switch; override to select another switch
  OPAM_SWITCH: "base"
  # Used to select special compiler switches such as flambda, 32bits, etc...
  OPAM_VARIANT: ""
  GIT_DEPTH: "10"

docker-boot:
  stage: docker
  image: docker:stable
  services:
    - docker:dind
  before_script: []
  script:
    - docker login -u gitlab-ci-token -p "$CI_JOB_TOKEN" "$CI_REGISTRY"
    - cd dev/ci/docker/bionic_coq/
    - if docker pull "$IMAGE"; then echo "Image prebuilt!"; exit 0; fi
    - docker build -t "$IMAGE" .
    - docker push "$IMAGE"
  except:
    variables:
      - $SKIP_DOCKER == "true"
  tags:
    - docker

before_script:
  - cat /proc/{cpu,mem}info || true
  - ls -a # figure out if artifacts are around
  - printenv -0 | sort -z | tr '\0' '\n'
  - declare -A switch_table
  - switch_table=( ["base"]="$COMPILER" ["edge"]="$COMPILER_EDGE" )
  - opam switch set -y "${switch_table[$OPAM_SWITCH]}$OPAM_VARIANT"
  - eval $(opam env)
  - opam list
  - opam config list

after_script:
  - echo "The build completed normally (not a runner failure)."

################ GITLAB CACHING ######################
# - use artifacts between jobs                       #
######################################################

# TODO figure out how to build doc for installed Coq
.build-template: &build-template
  stage: build
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - _install_ci
      - config/Makefile
      - config/coq_config.py
      - test-suite/misc/universes/all_stdlib.v
    expire_in: 1 week
  script:
    - set -e

    - echo 'start:coq.clean'
    - make clean # ensure that `make clean` works on a fresh clone
    - echo 'end:coq.clean'

    - echo 'start:coq.config'
    - ./configure -warn-error yes -prefix "$(pwd)/_install_ci" ${COQ_EXTRA_CONF}"$COQ_EXTRA_CONF_QUOTE"
    - echo 'end:coq.config'

    - echo 'start:coq.build'
    - make -j "$NJOBS" byte
    - make -j "$NJOBS" world $EXTRA_TARGET
    - make test-suite/misc/universes/all_stdlib.v
    - echo 'end:coq:build'

    - echo 'start:coq.install'
    - make install install-byte $EXTRA_INSTALL
    - make install-byte
    - cp bin/fake_ide _install_ci/bin/
    - echo 'end:coq.install'

    - set +e

# Template for building Coq + stdlib, typical use: overload the switch
.dune-template: &dune-template
  stage: build
  dependencies: []
  script:
    - set -e
    - make -f Makefile.dune world
    - set +e
  variables:
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - _build/
    expire_in: 1 week

.dune-ci-template: &dune-ci-template
  stage: test
  dependencies:
    - build:edge+flambda:dune:dev
  script:
    - set -e
    - echo 'start:coq.test'
    - make -f Makefile.dune "$DUNE_TARGET"
    - echo 'end:coq.test'
    - set +e
  variables: &dune-ci-template-vars
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"
  artifacts: &dune-ci-template-artifacts
    name: "$CI_JOB_NAME"
    expire_in: 1 month

# every non build job must set dependencies otherwise all build
# artifacts are used together and we may get some random Coq. To that
# purpose, we add a spurious dependency `not-a-real-job` that must be
# overridden otherwise the CI will fail.

.doc-template: &doc-template
  stage: test
  dependencies:
    - not-a-real-job
  script:
    - SPHINXENV='COQBIN="'"$PWD"'/_install_ci/bin/"'
    - make -j "$NJOBS" SPHINXENV="$SPHINXENV" SPHINX_DEPS= refman
    - make install-doc-sphinx
  artifacts:
    name: "$CI_JOB_NAME"
    paths:
      - _install_ci/share/doc/coq/

# set dependencies when using
.test-suite-template: &test-suite-template
  stage: test
  dependencies:
    - not-a-real-job
  script:
    - cd test-suite
    - make clean
    # careful with the ending /
    - BIN=$(readlink -f ../_install_ci/bin)/
    - LIB=$(readlink -f ../_install_ci/lib/coq)/
    - export OCAMLPATH=$(readlink -f ../_install_ci/lib/):"$OCAMLPATH"
    - make -j "$NJOBS" BIN="$BIN" COQLIB="$LIB" COQFLAGS="${COQFLAGS}" all
  artifacts:
    name: "$CI_JOB_NAME.logs"
    when: on_failure
    paths:
      - test-suite/logs

# set dependencies when using
.validate-template: &validate-template
  stage: test
  dependencies:
    - not-a-real-job
  script:
    - cd _install_ci
    - find lib/coq/ -name '*.vo' -print0 > vofiles
    - for regexp in 's/.vo//' 's:lib/coq/plugins:Coq:' 's:lib/coq/theories:Coq:' 's:/:.:g'; do sed -z -i "$regexp" vofiles; done
    - xargs -0 --arg-file=vofiles bin/coqchk -silent -o -m -coqlib lib/coq/

.ci-template: &ci-template
  stage: test
  script:
    - set -e
    - echo 'start:coq.test'
    - make -f Makefile.ci -j "$NJOBS" "${CI_JOB_NAME#*:}"
    - echo 'end:coq.test'
    - set +e
  dependencies:
    - build:base

.ci-template-flambda: &ci-template-flambda
  <<: *ci-template
  dependencies:
    - build:edge+flambda
  variables:
    OPAM_SWITCH: "edge"
    OPAM_VARIANT: "+flambda"

.windows-template: &windows-template
  stage: test
  artifacts:
    name: "%CI_JOB_NAME%"
    paths:
      - artifacts
    when: always
    expire_in: 1 week
  dependencies: []
  tags:
    - windows
  before_script: []
  script:
    - call dev/ci/gitlab.bat
  only:
    variables:
      - $WINDOWS =~ /enabled/

.deploy-template: &deploy-template
  stage: deploy
  before_script:
    - which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    - git config --global user.name "coqbot"
    - git config --global user.email "coqbot@users.noreply.github.com"

build:base:
  <<: *build-template
  variables:
    COQ_EXTRA_CONF: "-native-compiler yes -coqide opt"
    # coqdoc for stdlib, until we know how to build it from installed Coq
    EXTRA_TARGET: "stdlib"
    EXTRA_INSTALL: "install-doc-stdlib-html install-doc-printable"

# no coqide for 32bit: libgtk installation problems
build:base+32bit:
  <<: *build-template
  variables:
    OPAM_VARIANT: "+32bit"
    COQ_EXTRA_CONF: "-native-compiler yes"

build:edge+flambda:
  <<: *build-template
  variables:
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"
    COQ_EXTRA_CONF: "-native-compiler yes -coqide opt -flambda-opts "
    COQ_EXTRA_CONF_QUOTE: "-O3 -unbox-closures"

build:edge+flambda:dune:dev:
  <<: *dune-template

build:base+async:
  <<: *build-template
  stage: test
  variables:
    COQ_EXTRA_CONF: "-native-compiler yes -coqide opt"
    COQUSERFLAGS: "-async-proofs on"
  allow_failure: true # See https://github.com/coq/coq/issues/9658

build:quick:
  <<: *build-template
  variables:
    COQ_EXTRA_CONF: "-native-compiler no"
    QUICK: "1"
  allow_failure: true # See https://github.com/coq/coq/issues/9637

windows64:
  <<: *windows-template
  variables:
    ARCH: "64"

windows32:
  <<: *windows-template
  variables:
    ARCH: "32"
  except:
    - /^pr-.*$/

lint:
  image: docker:git
  stage: test
  script:
    - apk add bash
    - dev/lint-repository.sh
  dependencies: []
  before_script: []
  variables:
    # we need an unknown amount of history for per-commit linting
    GIT_DEPTH: ""

pkg:opam:
  stage: test
  # OPAM will build out-of-tree so no point in importing artifacts
  dependencies: []
  script:
    - set -e
    - opam pin add --kind=path coq.$COQ_VERSION .
    - opam pin add --kind=path coqide-server.$COQ_VERSION .
    - opam pin add --kind=path coqide.$COQ_VERSION .
    - set +e
  variables:
    COQ_VERSION: "8.10"
    OPAM_SWITCH: "edge"
    OPAM_VARIANT: "+flambda"

.nix-template: &nix-template
  image: nixorg/nix:latest # Minimal NixOS image which doesn't even contain git
  stage: test
  variables:
    # By default we use coq.cachix.org as an extra substituter but this can be overridden
    EXTRA_SUBSTITUTERS: https://coq.cachix.org
    EXTRA_PUBLIC_KEYS: coq.cachix.org-1:5QW/wwEnD+l2jvN6QRbRRsa4hBHG3QiQQ26cxu1F5tI=
    # The following variables should not be overridden
    GIT_STRATEGY: none
    NIXOS_PUBLIC_KEY: cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=

  dependencies: [] # We don't need to download build artifacts
  before_script: [] # We don't want to use the shared 'before_script'
  script:
    # Use current worktree as tmpdir to allow exporting artifacts in case of failure
    - export TMPDIR=$PWD
    # We build an expression rather than a direct URL to not be dependent on
    # the URL location; we are forced to put the public key of cache.nixos.org
    # because there is no --extra-trusted-public-key option.
    - nix-build -E "import (fetchTarball $CI_PROJECT_URL/-/archive/$CI_COMMIT_SHA.tar.gz) {}" -K --extra-substituters "$EXTRA_SUBSTITUTERS" --trusted-public-keys "$NIXOS_PUBLIC_KEY $EXTRA_PUBLIC_KEYS" | if [ ! -z "$CACHIX_SIGNING_KEY" ]; then cachix push coq; fi
  artifacts:
    name: "$CI_JOB_NAME.logs"
    when: on_failure
    paths:
      - nix-build-coq.drv-0/*/test-suite/logs

pkg:nix:deploy:
  <<: *nix-template
  environment:
    name: cachix
    url: https://coq.cachix.org
  before_script:
    # Install Cachix as documented at https://github.com/cachix/cachix
    - nix-env -iA cachix --prebuilt-only -f https://cachix.org/api/v1/install
  only:
    - master
    - /^v.*\..*$/

pkg:nix:deploy:channel:
  <<: *deploy-template
  environment:
    name: cachix
    url: https://coq.cachix.org
  only:
    variables:
      - $CACHIX_DEPLOYMENT_KEY
  dependencies:
    - pkg:nix:deploy
  script:
    - echo "$CACHIX_DEPLOYMENT_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - git fetch --unshallow
    - git push git@github.com:coq/coq-on-cachix "${CI_COMMIT_REF_NAME}"

pkg:nix:
  <<: *nix-template
  except:
    - master
    - /^v.*\..*$/

doc:refman:
  <<: *doc-template
  dependencies:
    - build:base

doc:refman:dune:
  <<: *dune-ci-template
  variables:
    <<: *dune-ci-template-vars
    DUNE_TARGET: refman-html
  artifacts:
    <<: *dune-ci-template-artifacts
    paths:
      - _build/default/doc/sphinx_build/html

doc:stdlib:dune:
  <<: *dune-ci-template
  variables:
    <<: *dune-ci-template-vars
    DUNE_TARGET: stdlib-html
  artifacts:
    <<: *dune-ci-template-artifacts
    paths:
      - _build/default/doc/stdlib/html

doc:refman:deploy:
  <<: *deploy-template
  environment:
    name: deployment
    url: https://coq.github.io/
  only:
    variables:
      - $DOCUMENTATION_DEPLOY_KEY
  dependencies:
    - doc:ml-api:odoc
    - doc:refman:dune
    - doc:stdlib:dune
  script:
    - echo "$DOCUMENTATION_DEPLOY_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - git clone git@github.com:coq/doc.git _deploy
    - rm -rf _deploy/$CI_COMMIT_REF_NAME/api
    - rm -rf _deploy/$CI_COMMIT_REF_NAME/refman
    - rm -rf _deploy/$CI_COMMIT_REF_NAME/stdlib
    - mkdir -p _deploy/$CI_COMMIT_REF_NAME
    - cp -rv _build/default/_doc/_html _deploy/$CI_COMMIT_REF_NAME/api
    - cp -rv _build/default/doc/sphinx_build/html _deploy/$CI_COMMIT_REF_NAME/refman
    - cp -rv _build/default/doc/stdlib/html _deploy/$CI_COMMIT_REF_NAME/stdlib
    - cd _deploy/$CI_COMMIT_REF_NAME/
    - git add api refman stdlib
    - git commit -m "Documentation of branch “$CI_COMMIT_REF_NAME” at $CI_COMMIT_SHORT_SHA"
    - git push # TODO: rebase and retry on failure

doc:ml-api:odoc:
  <<: *dune-ci-template
  variables:
    <<: *dune-ci-template-vars
    DUNE_TARGET: apidoc
  artifacts:
    <<: *dune-ci-template-artifacts
    paths:
      - _build/default/_doc/

test-suite:base:
  <<: *test-suite-template
  dependencies:
    - build:base

test-suite:base+32bit:
  <<: *test-suite-template
  dependencies:
    - build:base+32bit
  variables:
    OPAM_VARIANT: "+32bit"

test-suite:edge+flambda:
  <<: *test-suite-template
  dependencies:
    - build:edge+flambda
  variables:
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"

test-suite:egde:dune:dev:
  stage: test
  dependencies:
    - build:edge+flambda:dune:dev
  script: make -f Makefile.dune test-suite
  variables:
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"
  artifacts:
    name: "$CI_JOB_NAME.logs"
    when: on_failure
    paths:
      - _build/default/test-suite/logs

test-suite:edge+trunk+make:
  stage: test
  dependencies: []
  script:
    - opam switch create 4.09.0 --empty
    - eval $(opam env)
    - opam repo add ocaml-beta https://github.com/ocaml/ocaml-beta-repository.git
    - opam update
    - opam install ocaml-variants=4.09.0+trunk num
    - eval $(opam env)
    # We avoid problems with warnings:
    - ./configure -profile devel -warn-error no
    - make -j "$NJOBS" world
    - make -j "$NJOBS" test-suite UNIT_TESTS=
  variables:
    OPAM_SWITCH: base
  artifacts:
    name: "$CI_JOB_NAME.logs"
    when: always
    paths:
      - test-suite/logs
    expire_in: 1 week
  allow_failure: true

test-suite:edge+trunk+dune:
  stage: test
  dependencies: []
  script:
    - opam switch create 4.09.0 --empty
    - eval $(opam env)
    - opam repo add ocaml-beta https://github.com/ocaml/ocaml-beta-repository.git
    - opam update
    - opam install ocaml-variants=4.09.0+trunk num
    - opam pin add dune --dev # ounit lablgtk conf-gtksourceview
    - opam install dune
    - eval $(opam env)
    # We use the release profile to avoid problems with warnings
    - make -f Makefile.dune trunk
    - export COQ_UNIT_TEST=noop
    - dune runtest --profile=ocaml409
  variables:
    OPAM_SWITCH: base
  artifacts:
    name: "$CI_JOB_NAME.logs"
    when: always
    paths:
      - _build/log
      - _build/default/test-suite/logs
    expire_in: 1 week
  allow_failure: true

test-suite:base+async:
  <<: *test-suite-template
  dependencies:
    - build:base
  variables:
    COQFLAGS: "-async-proofs on"

validate:base:
  <<: *validate-template
  dependencies:
    - build:base

validate:base+32bit:
  <<: *validate-template
  dependencies:
    - build:base+32bit
  variables:
    OPAM_VARIANT: "+32bit"

validate:edge+flambda:
  <<: *validate-template
  dependencies:
    - build:edge+flambda
  variables:
    OPAM_SWITCH: edge
    OPAM_VARIANT: "+flambda"

validate:quick:
  <<: *validate-template
  dependencies:
    - build:quick

# Libraries are by convention the projects that depend on Coq
# but not on its ML API

library:ci-bedrock2:
  <<: *ci-template

library:ci-color:
  <<: *ci-template-flambda

library:ci-compcert:
  <<: *ci-template-flambda

library:ci-coquelicot:
  <<: *ci-template

library:ci-cross-crypto:
  <<: *ci-template

library:ci-fcsl-pcm:
  <<: *ci-template

library:ci-fiat-crypto:
  <<: *ci-template-flambda

library:ci-fiat-crypto-legacy:
  <<: *ci-template-flambda

library:ci-flocq:
  <<: *ci-template

library:ci-corn:
  <<: *ci-template-flambda

library:ci-geocoq:
  <<: *ci-template-flambda

library:ci-hott:
  <<: *ci-template

library:ci-iris-lambda-rust:
  <<: *ci-template-flambda

library:ci-math-comp:
  <<: *ci-template-flambda

library:ci-sf:
  <<: *ci-template

library:ci-stdlib2:
  <<: *ci-template-flambda

library:ci-unimath:
  <<: *ci-template-flambda

library:ci-verdi-raft:
  <<: *ci-template-flambda

library:ci-vst:
  <<: *ci-template-flambda

# Plugins are by definition the projects that depend on Coq's ML API

plugin:ci-aac_tactics:
  <<: *ci-template

plugin:ci-bignums:
  <<: *ci-template

plugin:ci-coq_dpdgraph:
  <<: *ci-template

plugin:ci-coqhammer:
  <<: *ci-template

plugin:ci-elpi:
  <<: *ci-template

plugin:ci-equations:
  <<: *ci-template

plugin:ci-fiat_parsers:
  <<: *ci-template

plugin:ci-ltac2:
  <<: *ci-template

plugin:ci-mtac2:
  <<: *ci-template

plugin:ci-paramcoq:
  <<: *ci-template

plugin:plugin-tutorial:
  stage: test
  dependencies: []
  script:
    - ./configure -local -warn-error yes
    - make -j "$NJOBS" plugin-tutorial

plugin:ci-quickchick:
  <<: *ci-template-flambda

plugin:ci-relation-algebra:
  <<: *ci-template
