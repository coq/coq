##########################################################################
##         #   The Coq Proof Assistant / The Coq Development Team       ##
##  v      #         Copyright INRIA, CNRS and contributors             ##
## <O___,, # (see version control and CREDITS file for authors & dates) ##
##   \VV/  ###############################################################
##    //   #    This file is distributed under the terms of the         ##
##         #     GNU Lesser General Public License Version 2.1          ##
##         #     (see LICENSE file for the text of the license)         ##
##########################################################################

-include config/Makefile

###########################################################################
# The SHOW and HIDE variables control whether make will echo complete commands
# or only abbreviated versions.
# Quiet mode is ON by default except if VERBOSE=1 option is given to make

SHOW := $(if $(VERBOSE),@true "",@echo "")
HIDE := $(if $(VERBOSE),,@)

###########################################################################
# VO build directory
###########################################################################

# slash at the end allows us to define this variable as empty, be
# careful, the slash is mandatory.
#
# Note, we can use this as _build/default , but unfortunately dune
# will remove the .vos files as they are not recognized as targets
VO_OUT_DIR=_build_vo/default/

$(VO_OUT_DIR):
	$(SHOW)'MKDIR     BUILD_VO'
	$(HIDE)mkdir -p $@
	$(HIDE)ln -s $(shell pwd)/_build/default/plugins/ $@
	$(HIDE)ln -s $(shell pwd)/_build/default/tools/ $@
	$(HIDE)ln -s $(shell pwd)/_build/default/kernel/ $@

###########################################################################
# Executables
###########################################################################

BCONTEXT=_build/default
CONTEXT=_build/install/default
CBIN=_build/install/default/bin
CSHARE=_build/install/default/share/coq

ifeq ($(BEST),byte)
  COQC:=$(CBIN)/coqc.byte$(EXE)
  export CAML_LD_LIBRARY_PATH:=$(shell echo $(CONTEXT)/lib/stublibs:$$CAML_LD_LIBRARY_PATH)
else
  COQC:=$(CBIN)/coqc$(EXE)
endif

COQTOPEXE:=$(CBIN)/coqtop$(EXE)
TOPBINOPT:=$(addsuffix .opt$(EXE), $(addprefix $(CBIN)/, coqproofworker coqtacticworker coqqueryworker)) $(COQTOPEXE)
COQDEP:=$(CBIN)/coqdep$(EXE)
DOC_GRAM:=_build/default/doc/tools/docgram/doc_grammar.exe
COQMAKEFILE:=$(CBIN)/coq_makefile$(EXE)
COQTEX:=$(CBIN)/coq-tex$(EXE)
COQWC:=$(CBIN)/coqwc$(EXE)
COQDOC:=$(CBIN)/coqdoc$(EXE)
COQDOCSTY:=$(CONTEXT)/lib/coq-core/tools/coqdoc/coqdoc.sty
COQDOCCSS:=$(CONTEXT)/lib/coq-core/tools/coqdoc/coqdoc.css
COQWORKMGR:=$(CBIN)/coqworkmgr$(EXE)
COQMAKE_ONE_TIME_FILE:=tools/make-one-time-file.py
COQTIME_FILE_MAKER:=tools/TimeFileMaker.py
COQMAKE_BOTH_TIME_FILES:=tools/make-both-time-files.py
COQMAKE_BOTH_SINGLE_TIMING_FILES:=tools/make-both-single-timing-files.py
VOTOUR:=$(CBIN)/votour
OCAMLLIBDEP:=$(CBIN)/ocamllibdep$(EXE)
FAKEIDE:=$(CBIN)/fake_ide$(EXE)
USERCONTRIBDIRS:=Ltac2
CHICKEN:=$(CBIN)/coqchk
TOOLS:=$(VOTOUR) $(COQDOC) $(COQWC)
CSDPCERT:=$(CBIN)/csdpcert

ifeq ($(origin COQ_SRC_DIR),undefined)
COQ_SRC_DIR=.
endif

COQ_CM_LIBS=coqpp lib clib kernel library engine pretyping gramlib interp printing parsing proofs tactics vernac stm toplevel topbin
ML_SOURCE_DIRS=$(addprefix $(COQ_SRC_DIR)/,$(COQ_CM_LIBS))
ALL_ML_SOURCE_FILES=$(shell find $(ML_SOURCE_DIRS) -name '*.ml' -or -name '*.mli' -or -name '*.c' -or -name '*.h')

# Override for developer build [to get warn-as-error for example]
_DDISPLAY?=quiet
_DPROFILE?=$(CONFIGURE_DPROFILE)
_DOPT:=--display $(_DDISPLAY) --profile=$(_DPROFILE)
_DBUILD:=flock .dune.lock dune build $(_DOPT)

# We rerun dune when any of the source files have changed

# touch is needed for all targets in `_build` as make won't track
# symlink's date correctly [and dune won't update the mtime as it
# doesn't use it as the main criteria], so if we didn't touch an
# updated mtime in a source file may not trigger a dune rebuild it it
# didn't change hash, thus the mtime of the target would confuse make.

$(CBIN)/%: $(ALL_ML_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

$(CSHARE)/%:
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

ALL_PLUGIN_SOURCE_FILES=$(shell find $(COQ_SRC_DIR)/plugins -name '*.ml' -or -name '*.mli' -or -name '*.mlg') $(ALL_ML_SOURCE_FILES)

_build/default/plugins/%.cmxs: $(ALL_PLUGIN_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/default/plugins/%.cma: $(ALL_PLUGIN_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

# Only used for the test-suite in local mode
_build/default/tools/%: $(ALL_ML_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/install/default/lib/coq-core/plugins/%.cmxs: $(ALL_PLUGIN_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/install/default/lib/stublibs/%.so: $(ALL_ML_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/install/default/lib/coq/%.cmi: $(ALL_ML_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/install/default/lib/coq-core/tools/coqdoc/coqdoc.sty:
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/install/default/lib/coq-core/tools/coqdoc/coqdoc.css:
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@
	$(HIDE)touch $@

_build/default/%.install:
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@

ALL_CONTRIB_SOURCE_FILES=$(shell find $(COQ_SRC_DIR)/user-contrib -name '*.ml' -or -name '*.mli' -or -name '*.mlg') $(ALL_PLUGIN_SOURCE_FILES)
_build/default/user-contrib/%.cmxs: $(ALL_CONTRIB_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@

_build/default/user-contrib/%.cma: $(ALL_CONTRIB_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@

.PHONY: all-src

ALL_SOURCE_FILES=$(ALL_CONTRIB_SOURCE_FILES) $(ALL_PLUGIN_SOURCE_FILES) $(ALL_ML_SOURCE_FILES)
all-src: $(ALL_SOURCE_FILES)
	$(SHOW)'DUNE      sources'
	$(HIDE)$(_DBUILD) @all-src

# For docgram
_build/default/doc/tools/%: $(ALL_ML_SOURCE_FILES)
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@

PLUGINTUTO := doc/plugin_tutorial

revision:
	$(SHOW)'DUNE      $@'
	$(HIDE)$(_DBUILD) $@

# For emacs:
# Local Variables:
# mode: makefile
# End:
