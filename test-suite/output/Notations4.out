[< 0 > + < 1 > * < 2 >]
     : nat
Entry constr:myconstr is
[ "6" RIGHTA
  [  ]
| "5" RIGHTA
  [ SELF; "+"; NEXT ]
| "4" RIGHTA
  [ SELF; "*"; NEXT ]
| "3" RIGHTA
  [ "<"; constr:operconstr LEVEL "10"; ">" ] ]

[< b > + < b > * < 2 >]
     : nat
[<< # 0 >>]
     : option nat
[2 + 3]
     : nat
[1 {f 1}]
     : Expr
fun (x : nat) (y z : Expr) => [1 + y z + {f x}]
     : nat -> Expr -> Expr -> Expr
fun e : Expr =>
match e with
| [x y + z] => [x + y z]
| [1 + 1] => [1]
| _ => [e + e]
end
     : Expr -> Expr
[(1 + 1)]
     : Expr
Let "x" e1 e2
     : expr
Let "x" e1 e2
     : expr
Let "x" e1 e2 : list string
     : list string
myAnd1 True True
     : Prop
r 2 3
     : Prop
let v := 0%test17 in v : myint63
     : myint63
fun y : nat => # (x, z) |-> y & y
     : forall y : nat,
       (?T1 * ?T2 -> ?T1 * ?T2 * nat) * (?T * ?T0 -> ?T * ?T0 * nat)
where
?T : [y : nat  pat : ?T * ?T0  p0 : ?T * ?T0  p := p0 : ?T * ?T0
     |- Type] (pat, p0, p cannot be used)
?T0 : [y : nat  pat : ?T * ?T0  p0 : ?T * ?T0  p := p0 : ?T * ?T0
      |- Type] (pat, p0, p cannot be used)
?T1 : [y : nat  pat : ?T1 * ?T2  p0 : ?T1 * ?T2  p := p0 : ?T1 * ?T2
      |- Type] (pat, p0, p cannot be used)
?T2 : [y : nat  pat : ?T1 * ?T2  p0 : ?T1 * ?T2  p := p0 : ?T1 * ?T2
      |- Type] (pat, p0, p cannot be used)
fun y : nat => # (x, z) |-> (x + y) & (y + z)
     : forall y : nat,
       (nat * ?T -> nat * ?T * nat) * (?T0 * nat -> ?T0 * nat * nat)
where
?T : [y : nat  pat : nat * ?T  p0 : nat * ?T  p := p0 : nat * ?T
     |- Type] (pat, p0, p cannot be used)
?T0 : [y : nat  pat : ?T0 * nat  p0 : ?T0 * nat  p := p0 : ?T0 * nat
      |- Type] (pat, p0, p cannot be used)
fun '{| |} => true
     : R -> bool
b = a
     : Prop
The command has indeed failed with message:
The format is not the same on the right- and left-hand sides of the special token "..".
The command has indeed failed with message:
The format is not the same on the right- and left-hand sides of the special token "..".
The command has indeed failed with message:
The format is not the same on the right- and left-hand sides of the special token "..".
The command has indeed failed with message:
The format is not the same on the right- and left-hand sides of the special token "..".
Entry constr:expr is
[ "201" RIGHTA
  [ "{"; constr:operconstr LEVEL "200"; "}" ] ]

fun x : nat => [ x ]
     : nat -> nat
fun x : nat => [x]
     : nat -> nat
∀ x : nat, x = x
     : Prop
File "stdin", line 219, characters 0-160:
Warning: Notation "∀ _ .. _ , _" was already defined with a different format
in scope type_scope. [notation-incompatible-format,parsing]
∀x : nat,x = x
     : Prop
File "stdin", line 232, characters 0-60:
Warning: Notation "_ %%% _" was already defined with a different format.
[notation-incompatible-format,parsing]
File "stdin", line 236, characters 0-64:
Warning: Notation "_ %%% _" was already defined with a different format.
[notation-incompatible-format,parsing]
File "stdin", line 241, characters 0-62:
Warning: Lonely notation "_ %%%% _" was already defined with a different
format. [notation-incompatible-format,parsing]
3  %%  4
     : nat
3  %%  4
     : nat
3   %%   4
     : nat
File "stdin", line 269, characters 0-61:
Warning: The format modifier is irrelevant for only parsing rules.
[irrelevant-format-only-parsing,parsing]
File "stdin", line 273, characters 0-63:
Warning: The only parsing modifier has no effect in Reserved Notation.
[irrelevant-reserved-notation-only-parsing,parsing]
