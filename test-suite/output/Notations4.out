[< 0 > + < 1 > * < 2 >]
     : nat
Entry constr:myconstr is
[ "6" RIGHTA
  [  ]
| "5" RIGHTA
  [ SELF;  "+"; NEXT ]
| "4" RIGHTA
  [ SELF;  "*"; NEXT ]
| "3" RIGHTA
  [  "<"; constr:operconstr LEVEL "10";  ">" ] ]

[< b > + < b > * < 2 >]
     : nat
[<< # 0 >>]
     : option nat
[b + c]
     : nat
Add [1 + 1] [1 + 1]
     : Expr
[1 {f 1}]
     : Expr
fun (x : nat) (y z : Expr) => [1 + y z + {f x}]
     : nat -> Expr -> Expr -> Expr
fun e : Expr =>
match e with
| [x y + z] => [x + y z]
| [1 + 1] => [1]
| _ => [e + e]
end
     : Expr -> Expr
[(1 + 1)]
     : Expr
Let "x" e1 e2
     : expr
Let "x" e1 e2
     : expr
Let "x" e1 e2 : list string
     : list string
myAnd1 True True
     : Prop
r 2 3
     : Prop
let v := 0%test17 in v : myint63
     : myint63
fun y : nat => # (x, z) |-> y & y
     : forall y : nat,
       (?T1 * ?T2 -> ?T1 * ?T2 * nat) * (?T * ?T0 -> ?T * ?T0 * nat)
where
?T : [y : nat  pat : ?T * ?T0  p0 : ?T * ?T0  p := p0 : ?T * ?T0
     |- Type] (pat, p0, p cannot be used)
?T0 : [y : nat  pat : ?T * ?T0  p0 : ?T * ?T0  p := p0 : ?T * ?T0
      |- Type] (pat, p0, p cannot be used)
?T1 : [y : nat  pat : ?T1 * ?T2  p0 : ?T1 * ?T2  p := p0 : ?T1 * ?T2
      |- Type] (pat, p0, p cannot be used)
?T2 : [y : nat  pat : ?T1 * ?T2  p0 : ?T1 * ?T2  p := p0 : ?T1 * ?T2
      |- Type] (pat, p0, p cannot be used)
fun y : nat => # (x, z) |-> (x + y) & (y + z)
     : forall y : nat,
       (nat * ?T -> nat * ?T * nat) * (?T0 * nat -> ?T0 * nat * nat)
where
?T : [y : nat  pat : nat * ?T  p0 : nat * ?T  p := p0 : nat * ?T
     |- Type] (pat, p0, p cannot be used)
?T0 : [y : nat  pat : ?T0 * nat  p0 : ?T0 * nat  p := p0 : ?T0 * nat
      |- Type] (pat, p0, p cannot be used)
fun '{| |} => true
     : R -> bool
b = a
     : Prop
Entry constr:expr is
[ "201" RIGHTA
  [  "{"; constr:operconstr LEVEL "200";  "}" ] ]

