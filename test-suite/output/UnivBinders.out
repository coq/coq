Inductive Empty@{uu} : Type@{uu} :=  .
(* uu |=  *)
Record PWrap@{uu} (A : Type@{uu}) : Type@{uu} := pwrap
  { punwrap : A }.
(* uu |=  *)

PWrap has primitive projections with eta conversion.
Arguments PWrap A%type_scope
Arguments pwrap A%type_scope punwrap
Arguments punwrap A%type_scope p
Record PWrap@{uu} (A : Type@{uu}) : Type@{uu} := pwrap
  { punwrap : A }.
(* uu |=  *)

PWrap has primitive projections with eta conversion.
Arguments PWrap A%type_scope
Arguments pwrap A%type_scope punwrap
Arguments punwrap A%type_scope p
Record RWrap@{uu} (A : Type@{uu}) : Type@{uu} := rwrap
  { runwrap : A }.
(* uu |=  *)

Arguments RWrap A%type_scope
Arguments rwrap A%type_scope runwrap
Arguments runwrap A%type_scope r
runwrap@{uu} =
fun (A : Type@{uu}) (r : RWrap@{uu} A) => let (runwrap) := r in runwrap
     : forall A : Type@{uu}, RWrap@{uu} A -> A
(* uu |=  *)

runwrap is a projection of RWrap
Arguments runwrap A%type_scope r
Wrap@{uu} = fun A : Type@{uu} => A
     : Type@{uu} -> Type@{uu}
(* uu |=  *)

Arguments Wrap A%type_scope
wrap@{uu} =
fun (A : Type@{uu}) (Wrap : Wrap@{uu} A) => Wrap
     : forall {A : Type@{uu}}, Wrap@{uu} A -> A
(* uu |=  *)

Arguments wrap {A}%type_scope {Wrap}
bar@{uu} = nat
     : Wrap@{uu} Set
(* uu |= Set < uu *)
foo@{uu u v} =
Type@{u} -> Type@{v} -> Type@{uu}
     : Type@{max(uu+1,u+1,v+1)}
(* uu u v |=  *)
Type@{i} -> Type@{j}
     : Type@{max(i+1,j+1)}
(* {j i} |=  *)
     = Type@{i} -> Type@{j}
     : Type@{max(i+1,j+1)}
(* {j i} |=  *)
mono = Type@{mono.uu}
     : Type@{mono.uu+1}
mono
     : Type@{mono.uu+1}
Type@{mono.uu}
     : Type@{mono.uu+1}
File "./output/UnivBinders.v", line 50, characters 2-31:
The command has indeed failed with message:
Universe uu already exists.
monomono
     : Type@{MONOU+1}
mono.monomono
     : Type@{mono.MONOU+1}
monomono
     : Type@{MONOU+1}
mono
     : Type@{mono.uu+1}
File "./output/UnivBinders.v", line 70, characters 0-52:
The command has indeed failed with message:
Universe uu already exists.
bobmorane =
let tt := Type@{UnivBinders.32} in
let ff := Type@{UnivBinders.34} in tt -> ff
     : Type@{max(UnivBinders.31,UnivBinders.33)}
File "./output/UnivBinders.v", line 85, characters 23-25:
The command has indeed failed with message:
Universe uu already bound.
foo@{E M N} =
Type@{M} -> Type@{N} -> Type@{E}
     : Type@{max(E+1,M+1,N+1)}
(* E M N |=  *)
foo@{uu u v} =
Type@{u} -> Type@{v} -> Type@{uu}
     : Type@{max(uu+1,u+1,v+1)}
(* uu u v |=  *)
foo@{u u IMPORTANT} =
Type@{u} -> Type@{IMPORTANT} -> Type@{u}
     : Type@{max(u+1,u+1,IMPORTANT+1)}
(* u u IMPORTANT |=  *)
Inductive Empty@{E} : Type@{E} :=  .
(* E |=  *)
Record PWrap@{E} (A : Type@{E}) : Type@{E} := pwrap
  { punwrap : A }.
(* E |=  *)

PWrap has primitive projections with eta conversion.
Arguments PWrap A%type_scope
Arguments pwrap A%type_scope punwrap
Arguments punwrap A%type_scope p
punwrap@{K} : forall A : Type@{K}, PWrap@{K} A -> A
(* K |=  *)

punwrap is universe polymorphic
punwrap is a primitive projection of PWrap
Arguments punwrap A%type_scope p
punwrap is transparent
Expands to: Constant UnivBinders.punwrap
File "./output/UnivBinders.v", line 102, characters 0-19:
The command has indeed failed with message:
Universe instance length is 3 but should be 1.
File "./output/UnivBinders.v", line 103, characters 0-20:
The command has indeed failed with message:
Universe instance length is 0 but should be 1.
File "./output/UnivBinders.v", line 106, characters 0-30:
The command has indeed failed with message:
This object does not support universe names.
File "./output/UnivBinders.v", line 110, characters 0-50:
The command has indeed failed with message:
Cannot enforce v < u because u < gU < gV < v
insec@{v} = Type@{uu} -> Type@{v}
     : Type@{max(uu+1,v+1)}
(* v |=  *)
Inductive insecind@{k} : Type@{k+1} :=
    inseccstr : Type@{k} -> insecind@{k}.
(* k |=  *)

Arguments inseccstr _%type_scope
insec@{uu v} = Type@{uu} -> Type@{v}
     : Type@{max(uu+1,v+1)}
(* uu v |=  *)
Inductive insecind@{uu k} : Type@{k+1} :=
    inseccstr : Type@{k} -> insecind@{uu k}.
(* uu k |=  *)

Arguments inseccstr _%type_scope
insec2@{u} = Prop
     : Type@{Set+1}
(* u |=  *)
inmod@{uu} = Type@{uu}
     : Type@{uu+1}
(* uu |=  *)
SomeMod.inmod@{uu} = Type@{uu}
     : Type@{uu+1}
(* uu |=  *)
inmod@{uu} = Type@{uu}
     : Type@{uu+1}
(* uu |=  *)
Applied.infunct@{uu v} =
inmod@{uu} -> Type@{v}
     : Type@{max(uu+1,v+1)}
(* uu v |=  *)
axfoo@{i u u0} : Type@{u} -> Type@{i}
(* i u u0 |=  *)

axfoo is universe polymorphic
Arguments axfoo _%type_scope
Expands to: Constant UnivBinders.axfoo
axbar@{i u u0} : Type@{u0} -> Type@{i}
(* i u u0 |=  *)

axbar is universe polymorphic
Arguments axbar _%type_scope
Expands to: Constant UnivBinders.axbar
axfoo' : Type@{axfoo'.u0} -> Type@{axfoo'.i}

axfoo' is not universe polymorphic
Arguments axfoo' _%type_scope
Expands to: Constant UnivBinders.axfoo'
axbar' : Type@{axfoo'.u0} -> Type@{axfoo'.i}

axbar' is not universe polymorphic
Arguments axbar' _%type_scope
Expands to: Constant UnivBinders.axbar'
*** [ axfoo@{i u u0} : Type@{u} -> Type@{i} ]
(* i u u0 |=  *)

Arguments axfoo _%type_scope
*** [ axbar@{i u u0} : Type@{u0} -> Type@{i} ]
(* i u u0 |=  *)

Arguments axbar _%type_scope
*** [ axfoo' : Type@{axfoo'.u0} -> Type@{axfoo'.i} ]

Arguments axfoo' _%type_scope
*** [ axbar' : Type@{axfoo'.u0} -> Type@{axfoo'.i} ]

Arguments axbar' _%type_scope
File "./output/UnivBinders.v", line 157, characters 19-26:
The command has indeed failed with message:
When declaring multiple assumptions in one command, only the first name is
allowed to mention a universe binder (which will be shared by the whole
block).
foo@{i} = Type@{M.i} -> Type@{i}
     : Type@{max(M.i+1,i+1)}
(* i |=  *)
Type@{u0} -> Type@{UnivBinders.64}
     : Type@{max(u0+1,UnivBinders.64+1)}
(* {UnivBinders.64} |=  *)
bind_univs.mono = Type@{bind_univs.mono.u}
     : Type@{bind_univs.mono.u+1}
bind_univs.poly@{u} = Type@{u}
     : Type@{u+1}
(* u |=  *)
Inductive MutualR1@{u} (A : Type@{u}) : Prop :=
    Build_MutualR1 : MutualR2@{u} A -> MutualR1@{u} A
  with MutualR2@{u} (A : Type@{u}) : Prop :=
    Build_MutualR2 : MutualR1@{u} A -> MutualR2@{u} A.
(* u |=  *)

Arguments MutualR1 A%type_scope
Arguments Build_MutualR1 A%type_scope p1
Arguments p1 A%type_scope m
Arguments MutualR2 A%type_scope
Arguments Build_MutualR2 A%type_scope p2
Arguments p2 A%type_scope m
Inductive MutualI1@{u u0} (A : Type@{u}) : Type@{u0} :=
    C1 : MutualI2@{u u0} A -> MutualI1@{u u0} A
  with MutualI2@{u u0} (A : Type@{u}) : Type@{u0} :=
    C2 : MutualI1@{u u0} A -> MutualI2@{u u0} A.
(* u u0 |=  *)

Arguments MutualI1 A%type_scope
Arguments C1 A%type_scope p1
Arguments MutualI2 A%type_scope
Arguments C2 A%type_scope p2
CoInductive MutualR1'@{u} (A : Type@{u}) : Prop :=
    Build_MutualR1' : MutualR2'@{u} A -> MutualR1'@{u} A
  with MutualR2'@{u} (A : Type@{u}) : Prop :=
    Build_MutualR2' : MutualR1'@{u} A -> MutualR2'@{u} A.
(* u |=  *)

Arguments MutualR1' A%type_scope
Arguments Build_MutualR1' A%type_scope p1'
Arguments p1' A%type_scope m
Arguments MutualR2' A%type_scope
Arguments Build_MutualR2' A%type_scope p2'
Arguments p2' A%type_scope m
CoInductive MutualI1'@{u u0} (A : Type@{u}) : Type@{u0} :=
    C1' : MutualI2'@{u u0} A -> MutualI1'@{u u0} A
  with MutualI2'@{u u0} (A : Type@{u}) : Type@{u0} :=
    C2' : MutualI1'@{u u0} A -> MutualI2'@{u u0} A.
(* u u0 |=  *)

Arguments MutualI1' A%type_scope
Arguments C1' A%type_scope p1
Arguments MutualI2' A%type_scope
Arguments C2' A%type_scope p2
