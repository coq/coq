(************************************************************************)
(*         *   The Coq Proof Assistant / The Coq Development Team       *)
(*  v      *   INRIA, CNRS and contributors - Copyright 1999-2019       *)
(* <O___,, *       (see CREDITS file for the list of authors)           *)
(*   \VV/  **************************************************************)
(*    //   *    This file is distributed under the terms of the         *)
(*         *     GNU Lesser General Public License Version 2.1          *)
(*         *     (see LICENSE file for the text of the license)         *)
(************************************************************************)
(**************************************************************************)
(*                                                                        *)
(* Omega: a solver of quantifier-free problems in Presburger Arithmetic   *)
(*                                                                        *)
(* Pierre CrÃ©gut (CNET, Lannion, France)                                  *)
(*                                                                        *)
(**************************************************************************)


DECLARE PLUGIN "omega_plugin"

{

open Ltac_plugin
open Names
open Coq_omega
open Stdarg

let eval_tactic name =
  let dp = DirPath.make (List.map Id.of_string ["PreOmega"; "omega"; "Coq"]) in
  let kn = KerName.make (ModPath.MPfile dp) (Label.make name) in
  let tac = Tacenv.interp_ltac kn in
  Tacinterp.eval_tactic tac

let omega_tactic l =
  let tacs = List.map
    (function
       | "nat" -> eval_tactic "zify_nat"
       | "positive" -> eval_tactic "zify_positive"
       | "N" -> eval_tactic "zify_N"
       | "Z" -> eval_tactic "zify_op"
       | s -> CErrors.user_err Pp.(str ("No Omega knowledge base for type "^s)))
    (Util.List.sort_uniquize String.compare l)
  in
  Tacticals.New.tclTHEN
    (Tacticals.New.tclREPEAT (Tacticals.New.tclTHENLIST tacs))
    (omega_solver)

let omega_deprecation = Deprecation.make ~since:"v8.11" ~note:"please use the `lia` tactic" ()

}

TACTIC EXTEND omega DEPRECATED { omega_deprecation }
|  [ "omega" ] -> { omega_tactic [] }
END

TACTIC EXTEND omega' DEPRECATED { omega_deprecation }
| [ "omega" "with" ne_ident_list(l) ] ->
    { omega_tactic (List.map Names.Id.to_string l) }
| [ "omega" "with" "*" ] ->
  { Tacticals.New.tclTHEN (eval_tactic "zify") (omega_tactic []) }
END

