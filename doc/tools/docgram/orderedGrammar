(* Defines the order to apply to editedGrammar to get productionlistGrammar.
doc_grammar will modify this file to add/remove nonterminals and productions
to match editedGrammar, which will remove comments.  Not compiled into Coq *)
DOC_GRAMMAR

vernac_toplevel: [
| "Drop" "."
| "Quit" "."
| "BackTo" num "."
| "Show" "Goal" num "at" num "."
| vernac_control
]

tactic_mode: [
| toplevel_selector_opt query_command
| toplevel_selector_opt "{"
| toplevel_selector_opt ltac_info_opt ltac_expr ltac_use_default
| "par" ":" ltac_info_opt ltac_expr ltac_use_default
]

toplevel_selector_opt: [
| toplevel_selector
| empty
]

ltac_info_opt: [
| "Info" num
| empty
]

ltac_use_default: [
| "."
| "..."
]

vernac_control: [
| "Time" vernac_control
| "Redirect" string vernac_control
| "Timeout" num vernac_control
| "Fail" vernac_control
| quoted_attributes_list_opt vernac
]

term: [
| binder_constr
| term100
]

term100: [
| term_cast
| term10 ":>"
| term10
]

term10: [
| term9 appl_arg_list
| "@" qualid instance term9_list_opt
| "@" "?" ident ident_list
| term9
]

ident_list: [
| ident_list ident
| ident
]

appl_arg_list: [
| appl_arg_list appl_arg
| appl_arg
]

appl_arg: [
| "(" ident ":=" term ")"
| term9
]

term9: [
| ".." term0 ".."
| term1
]

term1: [
| term0 ".(" qualid appl_arg_list_opt ")"
| term0 ".(" "@" qualid term9_list_opt ")"
| term0 "%" ident
| term0
]

appl_arg_list_opt: [
| appl_arg_list_opt appl_arg
| empty
]

term9_list_opt: [
| term9_list_opt term9
| empty
]

empty: [
|
]

name_colon: [
| ident ":"
| "_" ":"
]

term0: [
| atomic_constr
| match_constr
| "(" term ")"
| "{|" record_fields "|" "}"
| "{" binder_constr "}"
| "`{" term "}"
| "`(" term ")"
| "ltac" ":" "(" ltac_expr ")"
]

record_fields: [
| record_field_declaration ";" record_fields
| record_field_declaration
| record_field ";" record_fields
| record_field ";"
| record_field
| empty
]

record_field_declaration: [
| qualid binder_list_opt ":=" term
]

record_field: [
| quoted_attributes_list_opt record_binder num_opt2 decl_notation
]

decl_notation: [
| "where" one_decl_notation_list
| empty
]

one_decl_notation_list: [
| one_decl_notation_list "and" one_decl_notation
| one_decl_notation
]

one_decl_notation: [
| string ":=" constr ident_opt3
]

constr: [
| term1
| "@" qualid instance
]

ident_opt3: [
| ":" ident
| empty
]

record_binder: [
| name
| name record_binder_body
]

record_binder_body: [
| binder_list_opt of_type_with_opt_coercion term
| binder_list_opt of_type_with_opt_coercion term ":=" term
| binder_list_opt ":=" term
]

of_type_with_opt_coercion: [
| ":>>"
| ":>" ">"
| ":>"
| ":" ">" ">"
| ":" ">"
| ":"
]

num_opt2: [
| "|" num
| empty
]

quoted_attributes_list_opt: [
| quoted_attributes_list_opt "#[" attribute_list_comma_opt "]"
| empty
]

attribute_list_comma_opt: [
| attribute_list_comma
| empty
]

attribute_list_comma: [
| attribute_list_comma "," attribute
| attribute
]

attribute: [
| ident attribute_value
]

attribute_value: [
| "=" string
| "(" attribute_list_comma_opt ")"
| empty
]

typeclass_constraint_list_comma: [
| typeclass_constraint_list_comma "," typeclass_constraint
| typeclass_constraint
]

typeclass_constraint: [
| "!" term
| "{" name "}" ":" exclam_opt term
| name_colon exclam_opt term
| term
]

exclam_opt: [
| "!"
| empty
]

of_alt: [
| "of"
| "&"
]

atomic_constr: [
| qualid instance
| sort
| numeral
| string
| "_"
| "?" "[" ident "]"
| "?" "[" "?" ident "]"
| "?" ident evar_instance
]

evar_instance: [
| "@{" inst_list_semi "}"
| empty
]

inst_list_semi: [
| inst_list_semi ";" inst
| inst
]

inst: [
| ident ":=" term
]

instance: [
| "@{" universe_level_list_opt "}"
| empty
]

universe_level_list_opt: [
| universe_level_list_opt universe_level
| empty
]

universe_level: [
| "Set"
| "Prop"
| "Type"
| "_"
| qualid
]

binders_fixannot: [
| "{" ident impl_ident_tail binders_fixannot
| fixannot
| binder binders_fixannot
| empty
]

impl_ident_tail: [
| "}"
| name_list ":" term "}"
| name_list "}"
| ":" term "}"
]

fixannot: [
| "{" "struct" ident "}"
| "{" "wf" constr ident "}"
| "{" "measure" constr ident_opt constr_opt "}"
| "{" "struct" name "}"
| empty
]

qualid: [
| qualid field
| ident
]

sort: [
| "Set"
| "Prop"
| "SProp"
| "Type"
| "Type" "@{" "_" "}"
| "Type" "@{" universe "}"
]

universe: [
| "max" "(" universe_expr_list_comma ")"
| universe_expr
]

universe_expr_list_comma: [
| universe_expr_list_comma "," universe_expr
| universe_expr
]

universe_expr: [
| universe_name universe_increment
]

universe_name: [
| qualid
| "Set"
| "Prop"
]

universe_increment: [
| "+" num
| empty
]

binder_constr: [
| "fun" open_binders "=>" term
| "forall" open_binders "," term
| "let" name binder_list_opt type_cstr ":=" term "in" term
| "let" single_fix "in" term
| "let" name_alt return_type_opt ":=" term "in" term
| "let" "'" pattern ":=" term "in" term
| "let" "'" pattern ":=" term "return" term100 "in" term
| "let" "'" pattern "in" pattern ":=" term "return" term100 "in" term
| "let" ":" pattern ":=" term "in" term      (* ssr plugin *)
| "let" ":" pattern ":=" term ssr_rtype "in" term      (* ssr plugin *)
| "let" ":" pattern "in" pattern ":=" term ssr_rtype "in" term      (* ssr plugin *)
| "if" term return_type_opt "then" term "else" term
| single_fix
| single_fix "with" fix_body_list "for" ident
| "if" term "is" ssr_dthen ssr_else      (* ssr plugin *)
| "if" term "isn't" ssr_dthen ssr_else      (* ssr plugin *)
]

type_cstr: [
| term_opt
| ":" term
| empty
]

term_opt: [
| ":" term
| empty
]

name: [
| "_"
| ident
]

name_alt: [
| "(" name_list_comma_opt ")"
| "()"
]

name_list_comma_opt: [
| name_list_comma
| empty
]

name_list_comma: [
| name_list_comma "," name
| name
]

open_binders: [
| name name_list_opt ":" term
| name name_list_opt binder_list_opt
| name ".." name
| closed_binder binder_list_opt
]

name_list_opt: [
| name_list_opt name
| empty
]

binder_list_opt: [
| binder_list_opt binder
| empty
]

binder: [
| name
| closed_binder
]

closed_binder: [
| "(" name name_list ":" term ")"
| "(" name ":" term ")"
| "(" name ":=" term ")"
| "(" name ":" term ":=" term ")"
| "{" name "}"
| "{" name name_list ":" term "}"
| "{" name ":" term "}"
| "{" name name_list "}"
| "`(" typeclass_constraint_list_comma ")"
| "`{" typeclass_constraint_list_comma "}"
| "'" pattern0
| of_alt term10      (* ssr plugin *)
| "(" "_" ":" term "|" term ")"
]

return_type_opt: [
| as_name_opt "return" term100
| empty
]

as_name_opt: [
| "as" name
| empty
]

single_fix: [
| fix_kw fix_body
]

fix_body_list: [
| fix_body_list "with" fix_body
| fix_body
]

fix_kw: [
| "fix"
| "cofix"
]

fix_body: [
| ident binders_fixannot type_cstr ":=" term
]

name_list: [
| name_list name
| name
]

term_cast: [
| term10 "<:" term
| term10 "<<:" term
| term10 ":" term
]

match_constr: [
| "match" case_item_list_comma term100_opt "with" or_opt eqn_list_or_opt "end"
]

case_item_list_comma: [
| case_item_list_comma "," case_item
| case_item
]

term100_opt: [
| term100
| empty
]

case_item: [
| term100 as_opt in_opt
]

as_opt: [
| "as" name
| empty
]

in_opt: [
| "in" pattern
| empty
]

or_opt: [
| "|"
| empty
]

eqn_list_or_opt: [
| eqn_list_or
| empty
]

eqn_list_or: [
| eqn_list_or "|" eqn
| eqn
]

eqn: [
| pattern_list_or "=>" term
]

pattern_list_or: [
| pattern_list_or "|" pattern_list_comma
| pattern_list_comma
]

pattern_list_comma: [
| pattern_list_comma "," pattern
| pattern
]

record_pattern: [
| qualid ":=" pattern
]

record_patterns: [
| record_pattern ";" record_patterns
| record_pattern ";"
| record_pattern
| empty
]

pattern: [
| pattern10 ":" binder_constr
| pattern10 ":" term100
| pattern10
]

ident_opt: [
| ident
| empty
]

constr_opt: [
| constr
| empty
]

pattern10: [
| pattern1 "as" name
| pattern1 pattern1_list
| "@" qualid pattern1_list_opt
| pattern1
]

pattern1_list: [
| pattern1_list pattern1
| pattern1
]

pattern1_list_opt: [
| pattern1_list_opt pattern1
| empty
]

pattern1: [
| pattern0 "%" ident
| pattern0
]

pattern0: [
| qualid
| "{|" record_patterns "|" "}"
| "_"
| "(" pattern ")"
| "(" pattern "|" pattern_list_or2 ")"
| numeral
| string
]

pattern_list_or2: [
| pattern_list_or2 "|" pattern
| pattern
]

vernac: [
| "Local" vernac_poly
| "Global" vernac_poly
| vernac_poly
]

vernac_poly: [
| "Polymorphic" vernac_aux
| "Monomorphic" vernac_aux
| vernac_aux
]

vernac_aux: [
| "Program" gallina "."
| "Program" gallina_ext "."
| gallina "."
| gallina_ext "."
| command "."
| tactic_mode "."
| syntax "."
| subprf
| query_command
]

subprf: [
| bullet
| "{"
| "}"
]

gallina: [
| thm_token ident_decl binder_list_opt ":" term with_list_opt
| assumption_token inline assum_list
| assumptions_token inline assum_list
| def_token ident_decl def_body
| "Let" ident def_body
| cumulativity_token_opt private_token finite_token inductive_definition_list
| "Fixpoint" rec_definition_list
| "Let" "Fixpoint" rec_definition_list
| "CoFixpoint" corec_definition_list
| "Let" "CoFixpoint" corec_definition_list
| "Scheme" scheme_list
| "Combined" "Scheme" ident "from" ident_list_comma
| "Register" qualid "as" qualid
| "Register" "Inline" qualid
| "Primitive" ident term_opt ":=" register_token
| "Universe" ident_list
| "Universes" ident_list
| "Constraint" univ_constraint_list_comma
]

univ_constraint_list_comma: [
| univ_constraint_list_comma "," univ_constraint
| univ_constraint
]

with_list_opt: [
| with_list_opt "with" ident_decl binder_list_opt ":" term
| empty
]

cumulativity_token_opt: [
| cumulativity_token
| empty
]

inductive_definition_list: [
| inductive_definition_list "with" inductive_definition
| inductive_definition
]

rec_definition_list: [
| rec_definition_list "with" rec_definition
| rec_definition
]

rec_definition: [
| ident_decl binders_fixannot type_cstr term_opt2 decl_notation
]

term_opt2: [
| ":=" term
| empty
]

corec_definition_list: [
| corec_definition_list "with" corec_definition
| corec_definition
]

scheme_list: [
| scheme_list "with" scheme
| scheme
]

ident_list_comma: [
| ident_list_comma "," ident
| ident
]

register_token: [
| register_prim_token
| "#int63_type"
]

register_prim_token: [
| "#int63_head0"
| "#int63_tail0"
| "#int63_add"
| "#int63_sub"
| "#int63_mul"
| "#int63_div"
| "#int63_mod"
| "#int63_lsr"
| "#int63_lsl"
| "#int63_land"
| "#int63_lor"
| "#int63_lxor"
| "#int63_addc"
| "#int63_subc"
| "#int63_addcarryc"
| "#int63_subcarryc"
| "#int63_mulc"
| "#int63_diveucl"
| "#int63_div21"
| "#int63_addmuldiv"
| "#int63_eq"
| "#int63_lt"
| "#int63_le"
| "#int63_compare"
]

thm_token: [
| "Theorem"
| "Lemma"
| "Fact"
| "Remark"
| "Corollary"
| "Proposition"
| "Property"
]

def_token: [
| "Definition"
| "Example"
| "SubClass"
]

assumption_token: [
| "Hypothesis"
| "Variable"
| "Axiom"
| "Parameter"
| "Conjecture"
]

assumptions_token: [
| "Hypotheses"
| "Variables"
| "Axioms"
| "Parameters"
| "Conjectures"
]

inline: [
| "Inline" "(" num ")"
| "Inline"
| empty
]

univ_constraint: [
| universe_name lt_alt universe_name
]

lt_alt: [
| "<"
| "="
| "<="
]

ident_decl: [
| ident univ_decl_opt
]

finite_token: [
| "Inductive"
| "CoInductive"
| "Variant"
| "Record"
| "Structure"
| "Class"
]

cumulativity_token: [
| "Cumulative"
| "NonCumulative"
]

private_token: [
| "Private"
| empty
]

def_body: [
| binder_list_opt ":=" reduce term
| binder_list_opt ":" term ":=" reduce term
| binder_list_opt ":" term
]

reduce: [
| "Eval" red_expr "in"
| empty
]

red_expr: [
| "red"
| "hnf"
| "simpl" delta_flag ref_or_pattern_occ_opt
| "cbv" strategy_flag
| "cbn" strategy_flag
| "lazy" strategy_flag
| "compute" delta_flag
| "vm_compute" ref_or_pattern_occ_opt
| "native_compute" ref_or_pattern_occ_opt
| "unfold" unfold_occ_list_comma
| "fold" constr_list
| "pattern" pattern_occ_list_comma
| ident
]

strategy_flag: [
| red_flags_list
| delta_flag
]

red_flags_list: [
| red_flags_list red_flags
| red_flags
]

red_flags: [
| "beta"
| "iota"
| "match"
| "fix"
| "cofix"
| "zeta"
| "delta" delta_flag
]

delta_flag: [
| "-" "[" smart_global_list "]"
| "[" smart_global_list "]"
| empty
]

ref_or_pattern_occ_opt: [
| ref_or_pattern_occ
| empty
]

ref_or_pattern_occ: [
| smart_global occs
| constr occs
]

unfold_occ_list_comma: [
| unfold_occ_list_comma "," unfold_occ
| unfold_occ
]

unfold_occ: [
| smart_global occs
]

pattern_occ_list_comma: [
| pattern_occ_list_comma "," pattern_occ
| pattern_occ
]

opt_constructors_or_fields: [
| ":=" constructor_list_or_record_decl
| empty
]

inductive_definition: [
| opt_coercion ident_decl binder_list_opt term_opt opt_constructors_or_fields decl_notation
]

opt_coercion: [
| ">"
| empty
]

constructor_list_or_record_decl: [
| "|" constructor_list_or
| ident constructor_type "|" constructor_list_or_opt
| ident constructor_type
| ident "{" record_fields "}"
| "{" record_fields "}"
| empty
]

constructor_list_or: [
| constructor_list_or "|" constructor
| constructor
]

constructor_list_or_opt: [
| constructor_list_or
| empty
]

assum_list: [
| assum_coe_list
| simple_assum_coe
]

assum_coe_list: [
| assum_coe_list assum_coe
| assum_coe
]

assum_coe: [
| "(" simple_assum_coe ")"
]

simple_assum_coe: [
| ident_decl_list of_type_with_opt_coercion term
]

ident_decl_list: [
| ident_decl_list ident_decl
| ident_decl
]

constructor_type: [
| binder_list_opt of_type_with_opt_coercion_opt
]

of_type_with_opt_coercion_opt: [
| of_type_with_opt_coercion term
| empty
]

constructor: [
| ident constructor_type
]

corec_definition: [
| ident_decl binder_list_opt type_cstr term_opt2 decl_notation
]

scheme: [
| scheme_kind
| ident ":=" scheme_kind
]

scheme_kind: [
| "Induction" "for" smart_global "Sort" sort_family
| "Minimality" "for" smart_global "Sort" sort_family
| "Elimination" "for" smart_global "Sort" sort_family
| "Case" "for" smart_global "Sort" sort_family
| "Equality" "for" smart_global
]

sort_family: [
| "Set"
| "Prop"
| "SProp"
| "Type"
]

smart_global: [
| qualid
| by_notation
]

by_notation: [
| string ident_opt2
]

ident_opt2: [
| "%" ident
| empty
]

gallina_ext: [
| "Module" export_token ident module_binder_list_opt of_module_type is_module_expr
| "Module" "Type" ident module_binder_list_opt module_type_inl_list_opt is_module_type
| "Declare" "Module" export_token ident module_binder_list_opt ":" module_type_inl
| "Section" ident
| "Chapter" ident
| "End" ident
| "Collection" ident ":=" section_subset_expr
| "Require" export_token qualid_list
| "From" qualid "Require" export_token qualid_list
| "Import" qualid_list
| "Export" qualid_list
| "Include" module_type_inl module_expr_inl_list_opt
| "Include" "Type" module_type_inl module_type_inl_list_opt
| "Transparent" smart_global_list
| "Opaque" smart_global_list
| "Strategy" strategy_level_list
| "Canonical" Structure_opt qualid univ_decl_opt2
| "Canonical" Structure_opt by_notation
| "Coercion" qualid univ_decl_opt def_body
| "Identity" "Coercion" ident ":" class_rawexpr ">->" class_rawexpr
| "Coercion" qualid ":" class_rawexpr ">->" class_rawexpr
| "Coercion" by_notation ":" class_rawexpr ">->" class_rawexpr
| "Context" binder_list
| "Instance" instance_name ":" term hint_info record_fields_opt
| "Existing" "Instance" qualid hint_info
| "Existing" "Instances" qualid_list num_opt2
| "Existing" "Class" qualid
| "Arguments" smart_global argument_spec_block_list_opt more_implicits_block_opt arguments_modifier_opt
| "Implicit" "Type" reserv_list
| "Implicit" "Types" reserv_list
| "Generalizable" All_alt
| "Export" "Set" ident_list option_setting
| "Export" "Unset" ident_list
| "Import" "Prenex" "Implicits"      (* ssr plugin *)
]

smart_global_list: [
| smart_global_list smart_global
| smart_global
]

num_opt: [
| num
| empty
]

qualid_list: [
| qualid_list qualid
| qualid
]

option_setting: [
| empty
| int
| string
]

class_rawexpr: [
| "Funclass"
| "Sortclass"
| smart_global
]

hint_info: [
| "|" num_opt constr_opt
| empty
]

module_binder_list_opt: [
| module_binder_list_opt "(" export_token ident_list ":" module_type_inl ")"
| empty
]

module_type_inl_list_opt: [
| module_type_inl_list_opt module_type_inl
| empty
]

module_expr_inl_list_opt: [
| module_expr_inl_list_opt module_expr_inl
| empty
]

strategy_level_list: [
| strategy_level_list strategy_level "[" smart_global_list "]"
| strategy_level "[" smart_global_list "]"
]

binder_list: [
| binder_list binder
| binder
]

record_fields_opt: [
| ":=" "{" record_fields "}"
| ":=" term
| empty
]

argument_spec_block_list_opt: [
| argument_spec_block_list_opt argument_spec_block
| empty
]

more_implicits_block_opt: [
| "," more_implicits_block_list_comma
| empty
]

more_implicits_block_list_comma: [
| more_implicits_block_list_comma "," more_implicits_block_list_opt
| more_implicits_block_list_opt
]

arguments_modifier_opt: [
| ":" arguments_modifier_list_comma
| empty
]

arguments_modifier_list_comma: [
| arguments_modifier_list_comma "," arguments_modifier
| arguments_modifier
]

All_alt: [
| "All" "Variables"
| "No" "Variables"
| Variable_alt ident_list
]

Variable_alt: [
| "Variable"
| "Variables"
]

more_implicits_block_list_opt: [
| more_implicits_block_list_opt more_implicits_block
| empty
]

univ_decl_opt2: [
| univ_decl_opt def_body
| empty
]

univ_decl_opt: [
| "@{" ident_list_opt plus_opt univ_constraint_alt
| empty
]

plus_opt: [
| "+"
| empty
]

univ_constraint_alt: [
| "|" univ_constraint_list_comma_opt plus_opt "}"
| rbrace_alt
]

univ_constraint_list_comma_opt: [
| univ_constraint_list_comma
| empty
]

rbrace_alt: [
| "}"
| "|" "}"
]

export_token: [
| "Import"
| "Export"
| empty
]

of_module_type: [
| ":" module_type_inl
| module_type_inl_list_opt
]

is_module_type: [
| ":=" module_type_inl module_type_inl_list_opt
| empty
]

is_module_expr: [
| ":=" module_expr_inl module_expr_inl_list_opt
| empty
]

functor_app_annot: [
| "[" "inline" "at" "level" num "]"
| "[" "no" "inline" "]"
| empty
]

module_expr_inl: [
| "!" module_expr
| module_expr functor_app_annot
]

module_type_inl: [
| "!" module_type
| module_type functor_app_annot
]

module_expr: [
| module_expr_atom
| module_expr module_expr_atom
]

module_expr_atom: [
| qualid
| "(" module_expr ")"
]

module_type: [
| qualid
| "(" module_type ")"
| module_type module_expr_atom
| module_type "with" with_declaration
]

with_declaration: [
| "Definition" qualid univ_decl_opt ":=" term
| "Module" qualid ":=" qualid
]

argument_spec_block: [
| exclam_opt name scope_opt
| "/"
| "&"
| "(" scope_list ")" scope_opt
| "[" scope_list "]" scope_opt
| "{" scope_list "}" scope_opt
]

scope_list: [
| scope_list scope_opt
| scope_opt
]

scope_opt: [
| "%" ident
| empty
]

more_implicits_block: [
| name
| "[" name_list "]"
| "{" name_list "}"
]

strategy_level: [
| "expand"
| "opaque"
| int
| "transparent"
]

instance_name: [
| ident_decl binder_list_opt
| empty
]

reserv_list: [
| reserv_tuple_list
| simple_reserv
]

reserv_tuple_list: [
| reserv_tuple_list reserv_tuple
| reserv_tuple
]

reserv_tuple: [
| "(" simple_reserv ")"
]

simple_reserv: [
| ident_list ":" term
]

arguments_modifier: [
| "simpl" "nomatch"
| "simpl" "never"
| "default" "implicits"
| "clear" "implicits"
| "clear" "scopes"
| "clear" "bidirectionality" "hint"
| "rename"
| "assert"
| "extra" "scopes"
| "clear" "scopes" "and" "implicits"
| "clear" "implicits" "and" "scopes"
]

Structure_opt: [
| "Structure"
| empty
]

command: [
| "Goal" term
| "Comments" comment_list_opt
| "Declare" "Instance" ident_decl binder_list_opt ":" term hint_info
| "Declare" "Scope" ident
| "Pwd"
| "Cd"
| "Cd" string
| "Load" Verbose_opt string_alt
| "Declare" "ML" "Module" string_list
| "Locate" locatable
| "Add" "LoadPath" string as_dirpath
| "Add" "Rec" "LoadPath" string as_dirpath
| "Remove" "LoadPath" string
| "AddPath" string "as" as_dirpath
| "AddRecPath" string "as" as_dirpath
| "DelPath" string
| "Type" term
| "Print" printable
| "Print" smart_global univ_name_list_opt
| "Print" "Module" "Type" qualid
| "Print" "Module" qualid
| "Print" "Namespace" dirpath
| "Inspect" num
| "Add" "ML" "Path" string
| "Add" "Rec" "ML" "Path" string
| "Set" ident_list option_setting
| "Unset" ident_list
| "Print" "Table" ident_list
| "Add" ident ident option_ref_value_list
| "Add" ident option_ref_value_list
| "Test" ident_list "for" option_ref_value_list
| "Test" ident_list
| "Remove" ident ident option_ref_value_list
| "Remove" ident option_ref_value_list
| "Write" "State" ident
| "Write" "State" string
| "Restore" "State" ident
| "Restore" "State" string
| "Reset" "Initial"
| "Reset" ident
| "Back"
| "Back" num
| "Debug" "On"
| "Debug" "Off"
| "Declare" "Reduction" ident ":=" red_expr
| "Declare" "Custom" "Entry" ident
| "Proof"
| "Proof" "Mode" string
| "Proof" term
| "Abort"
| "Abort" "All"
| "Abort" ident
| "Existential" num constr_body
| "Admitted"
| "Qed"
| "Save" ident
| "Defined"
| "Defined" ident
| "Restart"
| "Undo"
| "Undo" num
| "Undo" "To" num
| "Focus"
| "Focus" num
| "Unfocus"
| "Unfocused"
| "Show"
| "Show" num
| "Show" ident
| "Show" "Existentials"
| "Show" "Universes"
| "Show" "Conjectures"
| "Show" "Proof"
| "Show" "Intro"
| "Show" "Intros"
| "Show" "Match" qualid
| "Guarded"
| "Create" "HintDb" ident discriminated_opt
| "Remove" "Hints" qualid_list opt_hintbases
| "Hint" hint opt_hintbases
| "Obligation" int "of" ident ":" term withtac
| "Obligation" int "of" ident withtac
| "Obligation" int ":" term withtac
| "Obligation" int withtac
| "Next" "Obligation" "of" ident withtac
| "Next" "Obligation" withtac
| "Solve" "Obligation" int "of" ident "with" ltac_expr
| "Solve" "Obligation" int "with" ltac_expr
| "Solve" "Obligations" "of" ident "with" ltac_expr
| "Solve" "Obligations" "with" ltac_expr
| "Solve" "Obligations"
| "Solve" "All" "Obligations" "with" ltac_expr
| "Solve" "All" "Obligations"
| "Admit" "Obligations" "of" ident
| "Admit" "Obligations"
| "Obligation" "Tactic" ":=" ltac_expr
| "Show" "Obligation" "Tactic"
| "Obligations" "of" ident
| "Obligations"
| "Preterm" "of" ident
| "Preterm"
| "Hint" "Rewrite" orient constr_list
| "Hint" "Rewrite" orient constr_list "using" ltac_expr
| "Derive" "Inversion_clear" ident "with" constr "Sort" sort_family
| "Derive" "Inversion_clear" ident "with" constr
| "Derive" "Inversion" ident "with" constr "Sort" sort_family
| "Derive" "Inversion" ident "with" constr
| "Derive" "Dependent" "Inversion" ident "with" constr "Sort" sort_family
| "Derive" "Dependent" "Inversion_clear" ident "with" constr "Sort" sort_family
| "Declare" "Left" "Step" constr
| "Declare" "Right" "Step" constr
| "Grab" "Existential" "Variables"
| "Unshelve"
| "Declare" "Equivalent" "Keys" constr constr
| "Print" "Equivalent" "Keys"
| "Optimize" "Proof"
| "Optimize" "Heap"
| "Reset" "Ltac" "Profile"
| "Show" "Ltac" "Profile"
| "Show" "Ltac" "Profile" "CutOff" int
| "Show" "Ltac" "Profile" string
| "Hint" "Cut" "[" hints_path "]" opthints
| "Typeclasses" "Transparent" qualid_list_opt
| "Typeclasses" "Opaque" qualid_list_opt
| "Typeclasses" "eauto" ":=" debug eauto_search_strategy int_opt
| "Add" "Relation" constr constr "reflexivity" "proved" "by" constr "symmetry" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "reflexivity" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "as" ident
| "Add" "Relation" constr constr "symmetry" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "symmetry" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "reflexivity" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "reflexivity" "proved" "by" constr "symmetry" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Relation" constr constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "reflexivity" "proved" "by" constr "symmetry" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "reflexivity" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "symmetry" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "symmetry" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "reflexivity" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "reflexivity" "proved" "by" constr "symmetry" "proved" "by" constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Parametric" "Relation" binder_list_opt ":" constr constr "transitivity" "proved" "by" constr "as" ident
| "Add" "Setoid" constr constr constr "as" ident
| "Add" "Parametric" "Setoid" binder_list_opt ":" constr constr constr "as" ident
| "Add" "Morphism" constr ":" ident
| "Declare" "Morphism" constr ":" ident
| "Add" "Morphism" constr "with" "signature" term "as" ident
| "Add" "Parametric" "Morphism" binder_list_opt ":" constr "with" "signature" term "as" ident
| "Print" "Rewrite" "HintDb" ident
| "Proof" "with" ltac_expr using_opt
| "Proof" "using" section_subset_expr with_opt
| "Tactic" "Notation" ltac_tactic_level_opt ltac_production_item_list ":=" ltac_expr
| "Print" "Ltac" qualid
| "Locate" "Ltac" qualid
| "Ltac" tacdef_body_list
| "Print" "Ltac" "Signatures"
| "Set" "Firstorder" "Solver" ltac_expr
| "Print" "Firstorder" "Solver"
| "Derive" ident "SuchThat" constr "As" ident      (* derive plugin *)
| "Extraction" qualid      (* extraction plugin *)
| "Recursive" "Extraction" qualid_list      (* extraction plugin *)
| "Extraction" string qualid_list      (* extraction plugin *)
| "Extraction" "TestCompile" qualid_list      (* extraction plugin *)
| "Separate" "Extraction" qualid_list      (* extraction plugin *)
| "Extraction" "Library" ident      (* extraction plugin *)
| "Recursive" "Extraction" "Library" ident      (* extraction plugin *)
| "Extraction" "Language" language      (* extraction plugin *)
| "Extraction" "Inline" qualid_list      (* extraction plugin *)
| "Extraction" "NoInline" qualid_list      (* extraction plugin *)
| "Print" "Extraction" "Inline"      (* extraction plugin *)
| "Reset" "Extraction" "Inline"      (* extraction plugin *)
| "Extraction" "Implicit" qualid "[" int_or_id_list_opt "]"      (* extraction plugin *)
| "Extraction" "Blacklist" ident_list      (* extraction plugin *)
| "Print" "Extraction" "Blacklist"      (* extraction plugin *)
| "Reset" "Extraction" "Blacklist"      (* extraction plugin *)
| "Extract" "Constant" qualid string_list_opt "=>" mlname      (* extraction plugin *)
| "Extract" "Inlined" "Constant" qualid "=>" mlname      (* extraction plugin *)
| "Extract" "Inductive" qualid "=>" mlname "[" mlname_list_opt "]" string_opt      (* extraction plugin *)
| "Show" "Extraction"      (* extraction plugin *)
| "Function" rec_definition_list      (* funind plugin *)
| "Functional" "Scheme" fun_scheme_arg_list      (* funind plugin *)
| "Functional" "Case" fun_scheme_arg      (* funind plugin *)
| "Generate" "graph" "for" qualid      (* funind plugin *)
| "Hint" "Rewrite" orient constr_list ":" ident_list_opt
| "Hint" "Rewrite" orient constr_list "using" ltac_expr ":" ident_list_opt
| "Add" "Ring" ident ":" constr ring_mods_opt      (* setoid_ring plugin *)
| "Print" "Rings"      (* setoid_ring plugin *)
| "Add" "Field" ident ":" constr field_mods_opt      (* setoid_ring plugin *)
| "Print" "Fields"      (* setoid_ring plugin *)
| "Prenex" "Implicits" qualid_list      (* ssr plugin *)
| "Search" ssr_search_arg ssr_modlocs      (* ssr plugin *)
| "Print" "Hint" "View" ssrviewpos      (* ssr plugin *)
| "Hint" "View" ssrviewpos ssrhintref_list      (* ssr plugin *)
| "Numeral" "Notation" qualid qualid qualid ":" ident numnotoption
| "String" "Notation" qualid qualid qualid ":" ident
]

constr_list: [
| constr_list constr
| constr
]

orient: [
| "->"
| "<-"
| empty
]

string_opt: [
| string
| empty
]

ssrhintref_list: [
| ssrhintref_list ssrhintref
| ssrhintref
]

qualid_list_opt: [
| qualid_list_opt qualid
| empty
]

univ_name_list_opt: [
| "@{" name_list_opt "}"
| empty
]

section_subset_expr: [
| starredidentref_list_opt
| ssexpr
]

ssexpr: [
| "-" ssexpr50
| ssexpr50
]

ssexpr50: [
| ssexpr0 "-" ssexpr0
| ssexpr0 "+" ssexpr0
| ssexpr0
]

ssexpr0: [
| starredidentref
| "(" starredidentref_list_opt ")"
| "(" starredidentref_list_opt ")" "*"
| "(" ssexpr ")"
| "(" ssexpr ")" "*"
]

starredidentref_list_opt: [
| starredidentref_list_opt starredidentref
| empty
]

starredidentref: [
| ident
| ident "*"
| "Type"
| "Type" "*"
]

int_opt: [
| int
| empty
]

using_opt: [
| "using" section_subset_expr
| empty
]

with_opt: [
| "with" ltac_expr
| empty
]

ltac_tactic_level_opt: [
| "(" "at" "level" num ")"
| empty
]

ltac_production_item_list: [
| ltac_production_item_list ltac_production_item
| ltac_production_item
]

tacdef_body_list: [
| tacdef_body_list "with" tacdef_body
| tacdef_body
]

printable: [
| "Term" smart_global univ_name_list_opt
| "All"
| "Section" qualid
| "Grammar" ident
| "Custom" "Grammar" ident
| "LoadPath" dirpath_opt
| "Modules"
| "Libraries"
| "ML" "Path"
| "ML" "Modules"
| "Debug" "GC"
| "Graph"
| "Classes"
| "TypeClasses"
| "Instances" smart_global
| "Coercions"
| "Coercion" "Paths" class_rawexpr class_rawexpr
| "Canonical" "Projections"
| "Tables"
| "Options"
| "Hint"
| "Hint" smart_global
| "Hint" "*"
| "HintDb" ident
| "Scopes"
| "Scope" ident
| "Visibility" ident_opt
| "Implicit" smart_global
| Sorted_opt "Universes" printunivs_subgraph_opt string_opt
| "Assumptions" smart_global
| "Opaque" "Dependencies" smart_global
| "Transparent" "Dependencies" smart_global
| "All" "Dependencies" smart_global
| "Strategy" smart_global
| "Strategies"
| "Registered"
]

dirpath_opt: [
| dirpath
| empty
]

dirpath: [
| ident
| dirpath field
]

Sorted_opt: [
| "Sorted"
| empty
]

printunivs_subgraph_opt: [
| "Subgraph" "(" qualid_list_opt ")"
| empty
]

comment_list_opt: [
| comment_list_opt comment
| empty
]

Verbose_opt: [
| "Verbose"
| empty
]

string_alt: [
| string
| ident
]

string_list: [
| string_list string
| string
]

option_ref_value_list: [
| option_ref_value_list option_ref_value
| option_ref_value
]

discriminated_opt: [
| "discriminated"
| empty
]

string_list_opt: [
| string_list_opt string
| empty
]

mlname_list_opt: [
| mlname_list_opt mlname
| empty
]

fun_scheme_arg_list: [
| fun_scheme_arg_list "with" fun_scheme_arg
| fun_scheme_arg
]

ring_mods_opt: [
| "(" ring_mod_list_comma ")"      (* setoid_ring plugin *)
| empty
]

field_mods_opt: [
| "(" field_mod_list_comma ")"      (* setoid_ring plugin *)
| empty
]

locatable: [
| smart_global
| "Term" smart_global
| "File" string
| "Library" qualid
| "Module" qualid
]

option_ref_value: [
| qualid
| string
]

as_dirpath: [
| as_opt2
| "as" dirpath
| empty
]

as_opt2: [
| "as" dirpath
| empty
]

comment: [
| constr
| string
| num
]

reference_or_constr: [
| qualid
| constr
]

hint: [
| "Resolve" reference_or_constr_list hint_info
| "Resolve" "->" qualid_list num_opt
| "Resolve" "<-" qualid_list num_opt
| "Immediate" reference_or_constr_list
| "Variables" "Transparent"
| "Variables" "Opaque"
| "Constants" "Transparent"
| "Constants" "Opaque"
| "Transparent" qualid_list
| "Opaque" qualid_list
| "Mode" qualid plus_list
| "Unfold" qualid_list
| "Constructors" qualid_list
| "Extern" num constr_opt "=>" ltac_expr
]

reference_or_constr_list: [
| reference_or_constr_list reference_or_constr
| reference_or_constr
]

constr_body: [
| ":=" term
| ":" term ":=" term
]

plus_list: [
| plus_list plus_alt
| plus_alt
]

plus_alt: [
| "+"
| "!"
| "-"
]

withtac: [
| "with" ltac_expr
| empty
]

ltac_def_kind: [
| ":="
| "::="
]

tacdef_body: [
| qualid fun_var_list ltac_def_kind ltac_expr
| qualid ltac_def_kind ltac_expr
]

ltac_production_item: [
| string
| ident "(" ident ltac_production_sep_opt ")"
| ident
]

ltac_production_sep_opt: [
| "," string
| empty
]

numnotoption: [
| empty
| "(" "warning" "after" num ")"
| "(" "abstract" "after" num ")"
]

mlname: [
| ident      (* extraction plugin *)
| string      (* extraction plugin *)
]

int_or_id: [
| ident      (* extraction plugin *)
| int      (* extraction plugin *)
]

language: [
| "Ocaml"      (* extraction plugin *)
| "OCaml"      (* extraction plugin *)
| "Haskell"      (* extraction plugin *)
| "Scheme"      (* extraction plugin *)
| "JSON"      (* extraction plugin *)
]

fun_scheme_arg: [
| ident ":=" "Induction" "for" qualid "Sort" sort_family      (* funind plugin *)
]

ring_mod: [
| "decidable" constr      (* setoid_ring plugin *)
| "abstract"      (* setoid_ring plugin *)
| "morphism" constr      (* setoid_ring plugin *)
| "constants" "[" ltac_expr "]"      (* setoid_ring plugin *)
| "closed" "[" qualid_list "]"      (* setoid_ring plugin *)
| "preprocess" "[" ltac_expr "]"      (* setoid_ring plugin *)
| "postprocess" "[" ltac_expr "]"      (* setoid_ring plugin *)
| "setoid" constr constr      (* setoid_ring plugin *)
| "sign" constr      (* setoid_ring plugin *)
| "power" constr "[" qualid_list "]"      (* setoid_ring plugin *)
| "power_tac" constr "[" ltac_expr "]"      (* setoid_ring plugin *)
| "div" constr      (* setoid_ring plugin *)
]

ring_mod_list_comma: [
| ring_mod_list_comma "," ring_mod
| ring_mod
]

field_mod: [
| ring_mod      (* setoid_ring plugin *)
| "completeness" constr      (* setoid_ring plugin *)
]

field_mod_list_comma: [
| field_mod_list_comma "," field_mod
| field_mod
]

debug: [
| "debug"
| empty
]

eauto_search_strategy: [
| "(bfs)"
| "(dfs)"
| empty
]

hints_path_atom: [
| qualid_list
| "_"
]

hints_path: [
| "(" hints_path ")"
| hints_path "*"
| "emp"
| "eps"
| hints_path "|" hints_path
| hints_path_atom
| hints_path hints_path
]

opthints: [
| ":" ident_list
| empty
]

opt_hintbases: [
| empty
| ":" ident_list
]

int_or_id_list_opt: [
| int_or_id_list_opt int_or_id
| empty
]

query_command: [
| "Eval" red_expr "in" term "."
| "Compute" term "."
| "Check" term "."
| "About" smart_global univ_name_list_opt "."
| "SearchHead" constr in_or_out_modules "."
| "SearchPattern" constr in_or_out_modules "."
| "SearchRewrite" constr in_or_out_modules "."
| "Search" searchabout_query searchabout_queries "."
| "SearchAbout" searchabout_query searchabout_queries "."
| "SearchAbout" "[" searchabout_query_list "]" in_or_out_modules "."
]

ne_in_or_out_modules: [
| "inside" qualid_list
| "outside" qualid_list
]

in_or_out_modules: [
| ne_in_or_out_modules
| empty
]

positive_search_mark: [
| "-"
| empty
]

searchabout_query: [
| positive_search_mark string scope_opt
| positive_search_mark constr
]

searchabout_queries: [
| ne_in_or_out_modules
| searchabout_query searchabout_queries
| empty
]

searchabout_query_list: [
| searchabout_query_list searchabout_query
| searchabout_query
]

syntax: [
| "Open" "Scope" ident
| "Close" "Scope" ident
| "Delimit" "Scope" ident "with" ident
| "Undelimit" "Scope" ident
| "Bind" "Scope" ident "with" class_rawexpr_list
| "Infix" string ":=" constr syntax_modifier_opt ident_opt3
| "Notation" ident ident_list_opt ":=" constr only_parsing
| "Notation" string ":=" constr syntax_modifier_opt ident_opt3
| "Format" "Notation" string string string
| "Reserved" "Infix" string syntax_modifier_opt
| "Reserved" "Notation" string syntax_modifier_opt
]

class_rawexpr_list: [
| class_rawexpr_list class_rawexpr
| class_rawexpr
]

syntax_modifier_opt: [
| "(" syntax_modifier_list_comma ")"
| empty
]

syntax_modifier_list_comma: [
| syntax_modifier_list_comma "," syntax_modifier
| syntax_modifier
]

only_parsing: [
| "(" "only" "parsing" ")"
| "(" "compat" string ")"
| empty
]

level: [
| "level" num
| "next" "level"
]

syntax_modifier: [
| "at" "level" num
| "in" "custom" ident
| "in" "custom" ident "at" "level" num
| "left" "associativity"
| "right" "associativity"
| "no" "associativity"
| "only" "printing"
| "only" "parsing"
| "compat" string
| "format" string string_opt
| ident "," ident_list_comma "at" level
| ident "at" level
| ident "at" level constr_as_binder_kind
| ident constr_as_binder_kind
| ident syntax_extension_type
]

syntax_extension_type: [
| "ident"
| "global"
| "bigint"
| "binder"
| "constr"
| "constr" level_opt constr_as_binder_kind_opt
| "pattern"
| "pattern" "at" "level" num
| "strict" "pattern"
| "strict" "pattern" "at" "level" num
| "closed" "binder"
| "custom" ident level_opt constr_as_binder_kind_opt
]

level_opt: [
| level
| empty
]

constr_as_binder_kind_opt: [
| constr_as_binder_kind
| empty
]

constr_as_binder_kind: [
| "as" "ident"
| "as" "pattern"
| "as" "strict" "pattern"
]

simple_tactic: [
| "reflexivity"
| "exact" constr
| "assumption"
| "etransitivity"
| "cut" constr
| "exact_no_check" constr
| "vm_cast_no_check" constr
| "native_cast_no_check" constr
| "casetype" constr
| "elimtype" constr
| "lapply" constr
| "transitivity" constr
| "left"
| "eleft"
| "left" "with" bindings
| "eleft" "with" bindings
| "right"
| "eright"
| "right" "with" bindings
| "eright" "with" bindings
| "constructor"
| "constructor" int_or_var
| "constructor" int_or_var "with" bindings
| "econstructor"
| "econstructor" int_or_var
| "econstructor" int_or_var "with" bindings
| "specialize" constr_with_bindings
| "specialize" constr_with_bindings "as" simple_intropattern
| "symmetry"
| "symmetry" "in" in_clause
| "split"
| "esplit"
| "split" "with" bindings
| "esplit" "with" bindings
| "exists"
| "exists" bindings_list_comma
| "eexists"
| "eexists" bindings_list_comma
| "intros" "until" quantified_hypothesis
| "intro"
| "intro" ident
| "intro" ident "at" "top"
| "intro" ident "at" "bottom"
| "intro" ident "after" ident
| "intro" ident "before" ident
| "intro" "at" "top"
| "intro" "at" "bottom"
| "intro" "after" ident
| "intro" "before" ident
| "move" ident "at" "top"
| "move" ident "at" "bottom"
| "move" ident "after" ident
| "move" ident "before" ident
| "rename" rename_list_comma
| "revert" ident_list
| "simple" "induction" quantified_hypothesis
| "simple" "destruct" quantified_hypothesis
| "double" "induction" quantified_hypothesis quantified_hypothesis
| "admit"
| "fix" ident num
| "cofix" ident
| "clear" ident_list_opt
| "clear" "-" ident_list
| "clearbody" ident_list
| "generalize" "dependent" constr
| "replace" constr "with" constr clause_dft_concl by_arg_tac
| "replace" "->" constr clause_dft_concl
| "replace" "<-" constr clause_dft_concl
| "replace" constr clause_dft_concl
| "simplify_eq"
| "simplify_eq" destruction_arg
| "esimplify_eq"
| "esimplify_eq" destruction_arg
| "discriminate"
| "discriminate" destruction_arg
| "ediscriminate"
| "ediscriminate" destruction_arg
| "injection"
| "injection" destruction_arg
| "einjection"
| "einjection" destruction_arg
| "injection" "as" simple_intropattern_list_opt
| "injection" destruction_arg "as" simple_intropattern_list_opt
| "einjection" "as" simple_intropattern_list_opt
| "einjection" destruction_arg "as" simple_intropattern_list_opt
| "simple" "injection"
| "simple" "injection" destruction_arg
| "dependent" "rewrite" orient constr
| "dependent" "rewrite" orient constr "in" ident
| "cutrewrite" orient constr
| "cutrewrite" orient constr "in" ident
| "decompose" "sum" constr
| "decompose" "record" constr
| "absurd" constr
| "contradiction" constr_with_bindings_opt
| "autorewrite" "with" ident_list clause_dft_concl
| "autorewrite" "with" ident_list clause_dft_concl "using" ltac_expr
| "autorewrite" "*" "with" ident_list clause_dft_concl
| "autorewrite" "*" "with" ident_list clause_dft_concl "using" ltac_expr
| "rewrite" "*" orient constr "in" ident "at" occurrences by_arg_tac
| "rewrite" "*" orient constr "at" occurrences "in" ident by_arg_tac
| "rewrite" "*" orient constr "in" ident by_arg_tac
| "rewrite" "*" orient constr "at" occurrences by_arg_tac
| "rewrite" "*" orient constr by_arg_tac
| "refine" constr
| "simple" "refine" constr
| "notypeclasses" "refine" constr
| "simple" "notypeclasses" "refine" constr
| "solve_constraints"
| "subst" ident_list
| "subst"
| "simple" "subst"
| "evar" "(" ident ":" term ")"
| "evar" constr
| "instantiate" "(" ident ":=" term ")"
| "instantiate" "(" int ":=" term ")" hloc
| "instantiate"
| "stepl" constr "by" ltac_expr
| "stepl" constr
| "stepr" constr "by" ltac_expr
| "stepr" constr
| "generalize_eqs" ident
| "dependent" "generalize_eqs" ident
| "generalize_eqs_vars" ident
| "dependent" "generalize_eqs_vars" ident
| "specialize_eqs" ident
| "hresolve_core" "(" ident ":=" constr ")" "at" int_or_var "in" constr
| "hresolve_core" "(" ident ":=" constr ")" "in" constr
| "hget_evar" int_or_var
| "destauto"
| "destauto" "in" ident
| "transparent_abstract" ltac_expr3
| "transparent_abstract" ltac_expr3 "using" ident
| "constr_eq" constr constr
| "constr_eq_strict" constr constr
| "constr_eq_nounivs" constr constr
| "is_evar" constr
| "has_evar" constr
| "is_var" constr
| "is_fix" constr
| "is_cofix" constr
| "is_ind" constr
| "is_constructor" constr
| "is_proj" constr
| "is_const" constr
| "shelve"
| "shelve_unifiable"
| "unshelve" ltac_expr1
| "give_up"
| "cycle" int_or_var
| "swap" int_or_var int_or_var
| "revgoals"
| "guard" int_or_var comparison int_or_var
| "decompose" "[" constr_list "]" constr
| "optimize_heap"
| "start" "ltac" "profiling"
| "stop" "ltac" "profiling"
| "reset" "ltac" "profile"
| "show" "ltac" "profile"
| "show" "ltac" "profile" "cutoff" int
| "show" "ltac" "profile" string
| "restart_timer" string_opt
| "finish_timing" string_opt
| "finish_timing" "(" string ")" string_opt
| "eassumption"
| "eexact" constr
| "trivial" auto_using hintbases
| "info_trivial" auto_using hintbases
| "debug" "trivial" auto_using hintbases
| "auto" int_or_var_opt auto_using hintbases
| "info_auto" int_or_var_opt auto_using hintbases
| "debug" "auto" int_or_var_opt auto_using hintbases
| "prolog" "[" constr_list_opt "]" int_or_var
| "eauto" int_or_var_opt int_or_var_opt auto_using hintbases
| "new" "auto" int_or_var_opt auto_using hintbases
| "debug" "eauto" int_or_var_opt int_or_var_opt auto_using hintbases
| "info_eauto" int_or_var_opt int_or_var_opt auto_using hintbases
| "dfs" "eauto" int_or_var_opt auto_using hintbases
| "autounfold" hintbases clause_dft_concl
| "autounfold_one" hintbases "in" ident
| "autounfold_one" hintbases
| "unify" constr constr
| "unify" constr constr "with" ident
| "convert_concl_no_check" constr
| "typeclasses" "eauto" "bfs" int_or_var_opt "with" ident_list
| "typeclasses" "eauto" int_or_var_opt "with" ident_list
| "typeclasses" "eauto" int_or_var_opt
| "head_of_constr" ident constr
| "not_evar" constr
| "is_ground" constr
| "autoapply" constr "using" ident
| "autoapply" constr "with" ident
| "progress_evars" ltac_expr
| "rewrite_strat" rewstrategy
| "rewrite_db" ident "in" ident
| "rewrite_db" ident
| "substitute" orient constr_with_bindings
| "setoid_rewrite" orient constr_with_bindings
| "setoid_rewrite" orient constr_with_bindings "in" ident
| "setoid_rewrite" orient constr_with_bindings "at" occurrences
| "setoid_rewrite" orient constr_with_bindings "at" occurrences "in" ident
| "setoid_rewrite" orient constr_with_bindings "in" ident "at" occurrences
| "setoid_symmetry"
| "setoid_symmetry" "in" ident
| "setoid_reflexivity"
| "setoid_transitivity" constr
| "setoid_etransitivity"
| "decide" "equality"
| "compare" constr constr
| "rewrite_strat" rewstrategy "in" ident
| "intros" intropattern_list_opt
| "eintros" intropattern_list_opt
| "apply" constr_with_bindings_arg_list_comma in_hyp_as
| "eapply" constr_with_bindings_arg_list_comma in_hyp_as
| "simple" "apply" constr_with_bindings_arg_list_comma in_hyp_as
| "simple" "eapply" constr_with_bindings_arg_list_comma in_hyp_as
| "elim" constr_with_bindings_arg eliminator_opt
| "eelim" constr_with_bindings_arg eliminator_opt
| "case" induction_clause_list
| "ecase" induction_clause_list
| "fix" ident num "with" fixdecl_list
| "cofix" ident "with" cofixdecl_list
| "pose" bindings_with_parameters
| "pose" constr as_name
| "epose" bindings_with_parameters
| "epose" constr as_name
| "set" bindings_with_parameters clause_dft_concl
| "set" constr as_name clause_dft_concl
| "eset" bindings_with_parameters clause_dft_concl
| "eset" constr as_name clause_dft_concl
| "remember" constr as_name eqn_ipat clause_dft_all
| "eremember" constr as_name eqn_ipat clause_dft_all
| "assert" "(" ident ":=" term ")"
| "eassert" "(" ident ":=" term ")"
| "assert" "(" ident ":" term ")" by_tactic
| "eassert" "(" ident ":" term ")" by_tactic
| "enough" "(" ident ":" term ")" by_tactic
| "eenough" "(" ident ":" term ")" by_tactic
| "assert" constr as_ipat by_tactic
| "eassert" constr as_ipat by_tactic
| "pose" "proof" term as_ipat
| "epose" "proof" term as_ipat
| "enough" constr as_ipat by_tactic
| "eenough" constr as_ipat by_tactic
| "generalize" constr
| "generalize" constr constr_list
| "generalize" constr occs as_name pattern_occ_list_opt
| "induction" induction_clause_list
| "einduction" induction_clause_list
| "destruct" induction_clause_list
| "edestruct" induction_clause_list
| "rewrite" oriented_rewriter_list_comma clause_dft_concl by_tactic
| "erewrite" oriented_rewriter_list_comma clause_dft_concl by_tactic
| "dependent" simple_alt quantified_hypothesis as_or_and_ipat with_opt2
| "simple" "inversion" quantified_hypothesis as_or_and_ipat in_hyp_list
| "inversion" quantified_hypothesis as_or_and_ipat in_hyp_list
| "inversion_clear" quantified_hypothesis as_or_and_ipat in_hyp_list
| "inversion" quantified_hypothesis "using" constr in_hyp_list
| "red" clause_dft_concl
| "hnf" clause_dft_concl
| "simpl" delta_flag ref_or_pattern_occ_opt clause_dft_concl
| "cbv" strategy_flag clause_dft_concl
| "cbn" strategy_flag clause_dft_concl
| "lazy" strategy_flag clause_dft_concl
| "compute" delta_flag clause_dft_concl
| "vm_compute" ref_or_pattern_occ_opt clause_dft_concl
| "native_compute" ref_or_pattern_occ_opt clause_dft_concl
| "unfold" unfold_occ_list_comma clause_dft_concl
| "fold" constr_list clause_dft_concl
| "pattern" pattern_occ_list_comma clause_dft_concl
| "change" conversion clause_dft_concl
| "change_no_check" conversion clause_dft_concl
| "btauto"
| "rtauto"
| "congruence"
| "congruence" int
| "congruence" "with" constr_list
| "congruence" int "with" constr_list
| "f_equal"
| "firstorder" ltac_expr_opt firstorder_using
| "firstorder" ltac_expr_opt "with" ident_list
| "firstorder" ltac_expr_opt firstorder_using "with" ident_list
| "gintuition" ltac_expr_opt
| "functional" "inversion" quantified_hypothesis qualid_opt      (* funind plugin *)
| "functional" "induction" constr_list fun_ind_using with_names      (* funind plugin *)
| "soft" "functional" "induction" constr_list fun_ind_using with_names      (* funind plugin *)
| "myred"      (* micromega plugin *)
| "psatz_Z" int_or_var ltac_expr      (* micromega plugin *)
| "psatz_Z" ltac_expr      (* micromega plugin *)
| "xlia" ltac_expr      (* micromega plugin *)
| "xnlia" ltac_expr      (* micromega plugin *)
| "xnra" ltac_expr      (* micromega plugin *)
| "xnqa" ltac_expr      (* micromega plugin *)
| "sos_Z" ltac_expr      (* micromega plugin *)
| "sos_Q" ltac_expr      (* micromega plugin *)
| "sos_R" ltac_expr      (* micromega plugin *)
| "lra_Q" ltac_expr      (* micromega plugin *)
| "lra_R" ltac_expr      (* micromega plugin *)
| "psatz_R" int_or_var ltac_expr      (* micromega plugin *)
| "psatz_R" ltac_expr      (* micromega plugin *)
| "psatz_Q" int_or_var ltac_expr      (* micromega plugin *)
| "psatz_Q" ltac_expr      (* micromega plugin *)
| "nsatz_compute" constr      (* nsatz plugin *)
| "omega"      (* omega plugin *)
| "omega" "with" ident_list      (* omega plugin *)
| "omega" "with" "*"      (* omega plugin *)
| "protect_fv" string "in" ident      (* setoid_ring plugin *)
| "protect_fv" string      (* setoid_ring plugin *)
| "ring_lookup" ltac_expr0 "[" constr_list_opt "]" constr_list      (* setoid_ring plugin *)
| "field_lookup" ltac_expr "[" constr_list_opt "]" constr_list      (* setoid_ring plugin *)
| "by" ssrhintarg      (* ssr plugin *)
| "clear" num      (* ssr plugin *)
| "move" ssrarg ssrrpat      (* ssr plugin *)
| "move" ssrarg ssrclauses      (* ssr plugin *)
| "move" ssrrpat      (* ssr plugin *)
| "move"      (* ssr plugin *)
| "case" ssrarg ssrclauses      (* ssr plugin *)
| "case"      (* ssr plugin *)
| "elim" ssrarg ssrclauses      (* ssr plugin *)
| "elim"      (* ssr plugin *)
| "apply" ssrapplyarg      (* ssr plugin *)
| "apply"      (* ssr plugin *)
| "exact" ssrexactarg      (* ssr plugin *)
| "exact"      (* ssr plugin *)
| "exact" "<:" term      (* ssr plugin *)
| "congr" ssrcongrarg      (* ssr plugin *)
| "ssrinstancesofruleL2R" term      (* ssr plugin *)
| "ssrinstancesofruleR2L" term      (* ssr plugin *)
| "rewrite" ssrrwarg_list ssrclauses      (* ssr plugin *)
| "unlock" ssrunlockarg_list_opt ssrclauses      (* ssr plugin *)
| "pose" "fix" ssrbvar ssrbinder_list_opt ssrstruct ssrfwd      (* ssr plugin *)
| "pose" "cofix" ssrbvar ssrbinder_list_opt ssrfwd      (* ssr plugin *)
| "pose" ident ssrbinder_list_opt ssrfwd      (* ssr plugin *)
| "set" ident ssrsetfwd ssrclauses      (* ssr plugin *)
| "abstract" ssrdgens      (* ssr plugin *)
| "have" ssrhpats_wtransp ssrbinder_list_opt ssrhavefwd      (* ssr plugin *)
| "have" "suff" ssripats ssrhavefwd      (* ssr plugin *)
| "have" "suffices" ssripats ssrhavefwd      (* ssr plugin *)
| "suff" "have" ssripats ssrhavefwd      (* ssr plugin *)
| "suffices" "have" ssripats ssrhavefwd      (* ssr plugin *)
| "suff" ssrsufffwd      (* ssr plugin *)
| "suffices" ssrsufffwd      (* ssr plugin *)
| "wlog" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "wlog" "suff" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "wlog" "suffices" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "without" "loss" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "without" "loss" "suff" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "without" "loss" "suffices" ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "gen" "have" ssrclear ssr_idcomma ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "generally" "have" ssrclear ssr_idcomma ssripats ssrwlogfwd ssrhint      (* ssr plugin *)
| "under" ssrrwarg      (* ssr plugin *)
| "under" ssrrwarg ssrintros_ne      (* ssr plugin *)
| "under" ssrrwarg ssrintros_ne "do" ssrhint3arg      (* ssr plugin *)
| "under" ssrrwarg "do" ssrhint3arg      (* ssr plugin *)
| "ssrinstancesoftpat" cpattern      (* ssrmatching plugin *)
]

int_or_var: [
| int
| ident
]

constr_with_bindings_opt: [
| constr_with_bindings
| empty
]

hloc: [
| empty
| "in" "|-" "*"
| "in" ident
| "in" "(" "Type" "of" ident ")"
| "in" "(" "Value" "of" ident ")"
| "in" "(" "type" "of" ident ")"
| "in" "(" "value" "of" ident ")"
]

rename: [
| ident "into" ident
]

by_arg_tac: [
| "by" ltac_expr3
| empty
]

in_clause: [
| in_clause
| "*" occs
| "*" "|-" concl_occ
| hypident_occ_list_comma_opt "|-" concl_occ
| hypident_occ_list_comma_opt
]

occs: [
| "at" occs_nums
| empty
]

hypident_occ_list_comma_opt: [
| hypident_occ_list_comma
| empty
]

as_ipat: [
| "as" simple_intropattern
| empty
]

or_and_intropattern_loc: [
| or_and_intropattern
| ident
]

as_or_and_ipat: [
| "as" or_and_intropattern_loc
| empty
]

eqn_ipat: [
| "eqn" ":" naming_intropattern
| "_eqn" ":" naming_intropattern
| "_eqn"
| empty
]

as_name: [
| "as" ident
| empty
]

by_tactic: [
| "by" ltac_expr3
| empty
]

rewriter: [
| "!" constr_with_bindings_arg
| qmark_alt constr_with_bindings_arg
| num "!" constr_with_bindings_arg
| num qmark_alt constr_with_bindings_arg
| num constr_with_bindings_arg
| constr_with_bindings_arg
]

qmark_alt: [
| "?"
| "?"
]

oriented_rewriter: [
| orient rewriter
]

induction_clause: [
| destruction_arg as_or_and_ipat eqn_ipat opt_clause
]

induction_clause_list: [
| induction_clause_list_comma eliminator_opt opt_clause
]

induction_clause_list_comma: [
| induction_clause_list_comma "," induction_clause
| induction_clause
]

eliminator_opt: [
| "using" constr_with_bindings
| empty
]

auto_using: [
| "using" constr_list_comma
| empty
]

constr_list_comma: [
| constr_list_comma "," constr
| constr
]

intropattern_list_opt: [
| intropattern_list_opt intropattern
| empty
]

or_and_intropattern: [
| "[" intropattern_or_list_or "]"
| "(" simple_intropattern_list_comma_opt ")"
| "(" simple_intropattern "&" simple_intropattern_list_ ")"
]

simple_intropattern_list_comma_opt: [
| simple_intropattern_list_comma
| empty
]

simple_intropattern_list_comma: [
| simple_intropattern_list_comma "," simple_intropattern
| simple_intropattern
]

simple_intropattern_list_: [
| simple_intropattern_list_ "&" simple_intropattern
| simple_intropattern
]

intropattern_or_list_or: [
| intropattern_or_list_or "|" intropattern_list_opt
| intropattern_list_opt
]

simple_intropattern_list_opt: [
| simple_intropattern_list_opt simple_intropattern
| empty
]

equality_intropattern: [
| "->"
| "<-"
| "[=" intropattern_list_opt "]"
]

naming_intropattern: [
| "?" ident
| "?"
| ident
]

intropattern: [
| simple_intropattern
| "*"
| "**"
]

simple_intropattern: [
| simple_intropattern_closed term0_list_opt
]

term0_list_opt: [
| term0_list_opt "%" term0
| empty
]

simple_intropattern_closed: [
| or_and_intropattern
| equality_intropattern
| "_"
| naming_intropattern
]

simple_binding: [
| "(" ident ":=" term ")"
| "(" num ":=" term ")"
]

bindings: [
| simple_binding_list
| constr_list
]

simple_binding_list: [
| simple_binding_list simple_binding
| simple_binding
]

constr_with_bindings_arg_list_comma: [
| constr_with_bindings_arg_list_comma "," constr_with_bindings_arg
| constr_with_bindings_arg
]

fixdecl_list: [
| fixdecl_list fixdecl
| fixdecl
]

cofixdecl_list: [
| cofixdecl_list cofixdecl
| cofixdecl
]

pattern_occ_list_opt: [
| pattern_occ_list_opt "," pattern_occ as_name
| empty
]

pattern_occ: [
| constr occs
]

oriented_rewriter_list_comma: [
| oriented_rewriter_list_comma "," oriented_rewriter
| oriented_rewriter
]

simple_alt: [
| "simple" "inversion"
| "inversion"
| "inversion_clear"
]

with_opt2: [
| "with" constr
| empty
]

bindings_list_comma: [
| bindings_list_comma "," bindings
| bindings
]

rename_list_comma: [
| rename_list_comma "," rename
| rename
]

comparison: [
| "="
| "<"
| "<="
| ">"
| ">="
]

hintbases: [
| "with" "*"
| "with" ident_list
| empty
]

qualid_opt: [
| qualid
| empty
]

bindings_with_parameters: [
| "(" ident simple_binder_list_opt ":=" term ")"
]

simple_binder_list_opt: [
| simple_binder_list_opt simple_binder
| empty
]

hypident: [
| ident
| "(" "type" "of" ident ")"      (* ssr plugin *)
| "(" "value" "of" ident ")"      (* ssr plugin *)
]

hypident_occ: [
| hypident occs
]

clause_dft_concl: [
| "in" in_clause
| occs
| empty
]

clause_dft_all: [
| "in" in_clause
| empty
]

opt_clause: [
| "in" in_clause
| "at" occs_nums
| empty
]

occs_nums: [
| num_or_var_list
| "-" num_or_var int_or_var_list_opt
]

num_or_var: [
| num
| ident
]

int_or_var_list_opt: [
| int_or_var_list_opt int_or_var
| empty
]

num_or_var_list: [
| num_or_var_list num_or_var
| num_or_var
]

concl_occ: [
| "*" occs
| empty
]

in_hyp_list: [
| "in" ident_list
| empty
]

in_hyp_as: [
| "in" ident as_ipat
| empty
]

simple_binder: [
| name
| "(" name_list ":" term ")"
]

fixdecl: [
| "(" ident simple_binder_list_opt fixannot ":" term ")"
]

cofixdecl: [
| "(" ident simple_binder_list_opt ":" term ")"
]

constr_list_opt: [
| constr_list_opt constr
| empty
]

constr_with_bindings: [
| constr with_bindings
]

with_bindings: [
| "with" bindings
| empty
]

destruction_arg: [
| num
| constr_with_bindings
| constr_with_bindings_arg
]

constr_with_bindings_arg: [
| ">" constr_with_bindings
| constr_with_bindings
]

quantified_hypothesis: [
| ident
| num
]

conversion: [
| constr
| constr "with" constr
| constr "at" occs_nums "with" constr
]

cpattern: [
| "Qed" constr      (* ssrmatching plugin *)
| constr      (* ssrmatching plugin *)
]

firstorder_using: [
| "using" qualid
| "using" qualid "," qualid_list_comma
| "using" qualid qualid qualid_list_opt
| empty
]

qualid_list_comma: [
| qualid_list_comma "," qualid
| qualid
]

fun_ind_using: [
| "using" constr_with_bindings      (* funind plugin *)
| empty      (* funind plugin *)
]

with_names: [
| "as" simple_intropattern      (* funind plugin *)
| empty      (* funind plugin *)
]

occurrences: [
| int_list
| ident
]

int_list: [
| int_list int
| int
]

rewstrategy: [
| constr
| "<-" constr
| "subterms" rewstrategy
| "subterm" rewstrategy
| "innermost" rewstrategy
| "outermost" rewstrategy
| "bottomup" rewstrategy
| "topdown" rewstrategy
| "id"
| "fail"
| "refl"
| "progress" rewstrategy
| "try" rewstrategy
| "any" rewstrategy
| "repeat" rewstrategy
| rewstrategy ";" rewstrategy
| "(" rewstrategy ")"
| "choice" rewstrategy rewstrategy
| "old_hints" ident
| "hints" ident
| "terms" constr_list_opt
| "eval" red_expr
| "fold" constr
]

hypident_occ_list_comma: [
| hypident_occ_list_comma "," hypident_occ
| hypident_occ
]

ltac_expr: [
| binder_tactic
| ltac_expr4
]

binder_tactic: [
| "fun" fun_var_list "=>" ltac_expr
| "let" rec_opt let_clause_list "in" ltac_expr
| "info" ltac_expr
]

fun_var_list: [
| fun_var_list fun_var
| fun_var
]

fun_var: [
| ident
| "_"
]

rec_opt: [
| "rec"
| empty
]

let_clause_list: [
| let_clause_list "with" let_clause
| let_clause
]

let_clause: [
| ident ":=" ltac_expr
| "_" ":=" ltac_expr
| ident fun_var_list ":=" ltac_expr
]

ltac_expr4: [
| ltac_expr3 ";" binder_tactic
| ltac_expr3 ";" ltac_expr3
| ltac_expr3 ";" "[" multi_goal_tactics "]"
| ltac_expr3 ";" "[" ">" multi_goal_tactics "]"
| ltac_expr ";" "first" ssr_first_else      (* ssr plugin *)
| ltac_expr ";" "first" ssrseqarg      (* ssr plugin *)
| ltac_expr ";" "last" ssrseqarg      (* ssr plugin *)
| ltac_expr3
]

multi_goal_tactics: [
| ltac_expr_opt "|" multi_goal_tactics
| ltac_expr_opt ".." or_opt ltac_expr_opt_list_or
| ltac_expr
| empty
]

ltac_expr_opt: [
| ltac_expr
| empty
]

ltac_expr_opt_list_or: [
| ltac_expr_opt_list_or "|" ltac_expr_opt
| ltac_expr_opt
]

ltac_expr3: [
| "try" ltac_expr3
| "do" int_or_var ltac_expr3
| "do" ssrmmod ssrdotac ssrclauses      (* ssr plugin *)
| "do" ssrortacarg ssrclauses      (* ssr plugin *)
| "do" int_or_var ssrmmod ssrdotac ssrclauses      (* ssr plugin *)
| "timeout" int_or_var ltac_expr3
| "time" string_opt ltac_expr3
| "repeat" ltac_expr3
| "progress" ltac_expr3
| "once" ltac_expr3
| "exactly_once" ltac_expr3
| "infoH" ltac_expr3
| "abstract" ltac_expr2
| "abstract" ltac_expr2 "using" ident
| "abstract" ssrdgens      (* ssr plugin *)
| only_selector ltac_expr3
| ltac_expr2
]

ltac_expr2: [
| ltac_expr1 "+" binder_tactic
| ltac_expr1 "+" ltac_expr2
| "tryif" ltac_expr "then" ltac_expr "else" ltac_expr2
| ltac_expr1 "||" binder_tactic
| ltac_expr1 "||" ltac_expr2
| ltac_expr1
]

ltac_expr1: [
| ltac_match_term
| ltac_match_goal
| "first" "[" ltac_expr_list_or_opt "]"
| "solve" "[" ltac_expr_list_or_opt "]"
| "idtac" message_token_list_opt
| failkw int_or_var_opt message_token_list_opt
| simple_tactic
| tactic_arg
| qualid tactic_arg_compat_list_opt
| ltac_expr ssrintros_ne      (* ssr plugin *)
| ltac_expr0
]

ltac_expr_list_or_opt: [
| ltac_expr_list_or
| empty
]

ltac_expr_list_or: [
| ltac_expr_list_or "|" ltac_expr
| ltac_expr
]

message_token_list_opt: [
| message_token_list_opt message_token
| empty
]

message_token: [
| ident
| string
| int
]

int_or_var_opt: [
| int_or_var
| empty
]

failkw: [
| "fail"
| "gfail"
]

tactic_arg: [
| "eval" red_expr "in" term
| "context" ident "[" term "]"
| "type" "of" term
| "fresh" fresh_id_list_opt
| "type_term" constr
| "numgoals"
]

fresh_id_list_opt: [
| fresh_id_list_opt fresh_id
| empty
]

fresh_id: [
| string
| qualid
]

tactic_arg_compat_list_opt: [
| tactic_arg_compat_list_opt tactic_arg_compat
| empty
]

tactic_arg_compat: [
| tactic_arg
| term
| "()"
]

ltac_expr0: [
| "(" ltac_expr ")"      (* ssr plugin *)
| "[" ">" multi_goal_tactics "]"
| tactic_atom
]

tactic_atom: [
| int
| qualid
| "()"
]

toplevel_selector: [
| selector ":"
| "all" ":"
| "!" ":"
]

only_selector: [
| "only" selector ":"
]

selector: [
| range_selector_list_comma
| "[" ident "]"
]

range_selector_list_comma: [
| range_selector_list_comma "," range_selector
| range_selector
]

range_selector: [
| num "-" num
| num
]

ltac_match_term: [
| match_key ltac_expr "with" or_opt match_rule_list_or "end"
]

match_key: [
| "match"
| "multimatch"
| "lazymatch"
]

match_rule_list_or: [
| match_rule_list_or "|" match_rule
| match_rule
]

match_rule: [
| match_pattern_alt "=>" ltac_expr
]

match_pattern_alt: [
| match_pattern
| "_"
]

match_pattern: [
| "context" ident_opt "[" term "]"
| term
]

ltac_match_goal: [
| match_key reverse_opt "goal" "with" or_opt match_context_rule_list_or "end"
]

reverse_opt: [
| "reverse"
| empty
]

match_context_rule_list_or: [
| match_context_rule_list_or "|" match_context_rule
| match_context_rule
]

match_context_rule: [
| match_hyp_list_comma_opt "|-" match_pattern "=>" ltac_expr
| "[" match_hyp_list_comma_opt "|-" match_pattern "]" "=>" ltac_expr
| "_" "=>" ltac_expr
]

match_hyp_list_comma_opt: [
| match_hyp_list_comma
| empty
]

match_hyp_list_comma: [
| match_hyp_list_comma "," match_hyp
| match_hyp
]

match_hyp: [
| name ":" match_pattern
| name ":=" match_pattern_opt match_pattern
]

match_pattern_opt: [
| "[" match_pattern "]" ":"
| empty
]

ssrsimpl_ne: [
| "//="      (* ssr plugin *)
| "/="      (* ssr plugin *)
| "/" num "/" num "="      (* ssr plugin *)
| "/" num "/"      (* ssr plugin *)
| "/" num "="      (* ssr plugin *)
| "/" num "/="      (* ssr plugin *)
| "/" num "/" "="      (* ssr plugin *)
| "//" num "="      (* ssr plugin *)
| "//"      (* ssr plugin *)
]

ssrclear_ne: [
| "{" ident_list "}"      (* ssr plugin *)
]

ssrclear: [
| ssrclear_ne      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrocc: [
| num num_list_opt      (* ssr plugin *)
| "-" num_list_opt      (* ssr plugin *)
| "+" num_list_opt      (* ssr plugin *)
]

num_list_opt: [
| num_list_opt num
| empty
]

ssrmmod: [
| "!"      (* ssr plugin *)
| "?"      (* ssr plugin *)
| "?"      (* ssr plugin *)
]

ssrmult_ne: [
| num ssrmmod      (* ssr plugin *)
| ssrmmod      (* ssr plugin *)
]

ssrmult: [
| ssrmult_ne      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrdocc: [
| "{" ssrocc "}"      (* ssr plugin *)
| "{" ident_list_opt "}"      (* ssr plugin *)
]

ssrbwdview: [
| "/" term      (* ssr plugin *)
| "/" term ssrbwdview      (* ssr plugin *)
]

ssrfwdview: [
| "/" constr      (* ssr plugin *)
| "/" constr ssrfwdview      (* ssr plugin *)
]

ssripat: [
| "_"      (* ssr plugin *)
| "*"      (* ssr plugin *)
| ">"      (* ssr plugin *)
| ident      (* ssr plugin *)
| "?"      (* ssr plugin *)
| "+"      (* ssr plugin *)
| "++"      (* ssr plugin *)
| ssrsimpl_ne      (* ssr plugin *)
| ssrdocc "->"      (* ssr plugin *)
| ssrdocc "<-"      (* ssr plugin *)
| ssrdocc      (* ssr plugin *)
| "->"      (* ssr plugin *)
| "<-"      (* ssr plugin *)
| "-"      (* ssr plugin *)
| "-/" "="      (* ssr plugin *)
| "-/="      (* ssr plugin *)
| "-/" "/"      (* ssr plugin *)
| "-//"      (* ssr plugin *)
| "-/" int "/"      (* ssr plugin *)
| "-/" "/="      (* ssr plugin *)
| "-//" "="      (* ssr plugin *)
| "-//="      (* ssr plugin *)
| "-/" int "/="      (* ssr plugin *)
| "-/" int "/" int "="      (* ssr plugin *)
| ssrfwdview      (* ssr plugin *)
| "[" ":" ident_list_opt "]"      (* ssr plugin *)
| "[:" ident_list_opt "]"      (* ssr plugin *)
| ssrcpat      (* ssr plugin *)
]

ident_list_opt: [
| ident_list_opt ident
| empty
]

ssripats: [
| ssripat ssripats      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssriorpat: [
| ssripats "|" ssriorpat      (* ssr plugin *)
| ssripats "|-" ">" ssriorpat      (* ssr plugin *)
| ssripats "|-" ssriorpat      (* ssr plugin *)
| ssripats "|->" ssriorpat      (* ssr plugin *)
| ssripats "||" ssriorpat      (* ssr plugin *)
| ssripats "|||" ssriorpat      (* ssr plugin *)
| ssripats "||||" ssriorpat      (* ssr plugin *)
| ssripats      (* ssr plugin *)
]

ssrcpat: [
| "[" hat "]"      (* ssr plugin *)
| "[" ssriorpat "]"      (* ssr plugin *)
| "[=" ssriorpat "]"      (* ssr plugin *)
]

hat: [
| "^" ident      (* ssr plugin *)
| "^" "~" ident      (* ssr plugin *)
| "^" "~" num      (* ssr plugin *)
| "^~" ident      (* ssr plugin *)
| "^~" num      (* ssr plugin *)
]

ssrhpats_wtransp: [
| ssripats      (* ssr plugin *)
| ssripats "@" ssripats      (* ssr plugin *)
]

ssrrpat: [
| "->"      (* ssr plugin *)
| "<-"      (* ssr plugin *)
]

ssrintros_ne: [
| "=>" ssripat ssripats      (* ssr plugin *)
]

ssrintros: [
| ssrintros_ne      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrortacs: [
| ltac_expr "|" ssrortacs      (* ssr plugin *)
| ltac_expr "|"      (* ssr plugin *)
| ltac_expr      (* ssr plugin *)
| "|" ssrortacs      (* ssr plugin *)
| "|"      (* ssr plugin *)
]

ssrhintarg: [
| "[" "]"      (* ssr plugin *)
| "[" ssrortacs "]"      (* ssr plugin *)
| ltac_expr      (* ssr plugin *)
]

ssrhint3arg: [
| "[" "]"      (* ssr plugin *)
| "[" ssrortacs "]"      (* ssr plugin *)
| ltac_expr3      (* ssr plugin *)
]

ssrortacarg: [
| "[" ssrortacs "]"      (* ssr plugin *)
]

ssrhint: [
| "by" ssrhintarg      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrwgen: [
| ssrclear_ne      (* ssr plugin *)
| ident      (* ssr plugin *)
| "@" ident      (* ssr plugin *)
| "(" ident ":=" lcpattern ")"      (* ssr plugin *)
| "(" ident ")"      (* ssr plugin *)
| "(@" ident ":=" lcpattern ")"      (* ssr plugin *)
| "(" "@" ident ":=" lcpattern ")"      (* ssr plugin *)
]

ssrclausehyps: [
| ssrwgen "," ssrclausehyps      (* ssr plugin *)
| ssrwgen ssrclausehyps      (* ssr plugin *)
| ssrwgen      (* ssr plugin *)
]

ssrclauses: [
| "in" ssrclausehyps "|-" "*"      (* ssr plugin *)
| "in" ssrclausehyps "|-"      (* ssr plugin *)
| "in" ssrclausehyps "*"      (* ssr plugin *)
| "in" ssrclausehyps      (* ssr plugin *)
| "in" "|-" "*"      (* ssr plugin *)
| "in" "*"      (* ssr plugin *)
| "in" "*" "|-"      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrfwd: [
| ":=" term      (* ssr plugin *)
| ":" term ":=" term      (* ssr plugin *)
]

ssrbvar: [
| ident      (* ssr plugin *)
| "_"      (* ssr plugin *)
]

ssrbinder: [
| ssrbvar      (* ssr plugin *)
| "(" ssrbvar ")"      (* ssr plugin *)
| "(" ssrbvar ":" term ")"      (* ssr plugin *)
| "(" ssrbvar ssrbvar_list ":" term ")"      (* ssr plugin *)
| "(" ssrbvar ":" term ":=" term ")"      (* ssr plugin *)
| "(" ssrbvar ":=" term ")"      (* ssr plugin *)
| of_alt term10      (* ssr plugin *)
]

ssrbvar_list: [
| ssrbvar_list ssrbvar
| ssrbvar
]

ssrstruct: [
| "{" "struct" ident "}"      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrbinder_list_opt: [
| ssrbinder_list_opt ssrbinder
| empty
]

ssrsetfwd: [
| ":" term ":=" "{" ssrocc "}" cpattern      (* ssr plugin *)
| ":" term ":=" lcpattern      (* ssr plugin *)
| ":=" "{" ssrocc "}" cpattern      (* ssr plugin *)
| ":=" lcpattern      (* ssr plugin *)
]

ssrhavefwd: [
| ":" term ssrhint      (* ssr plugin *)
| ":" term ":=" term      (* ssr plugin *)
| ":" term ":="      (* ssr plugin *)
| ":=" term      (* ssr plugin *)
]

ssrseqarg: [
| ssrswap      (* ssr plugin *)
| ssrseqidx ssrortacarg ssrorelse_opt      (* ssr plugin *)
| ssrseqidx ssrswap      (* ssr plugin *)
| ltac_expr3      (* ssr plugin *)
]

ssrorelse_opt: [
| ssrorelse
| empty
]

ssrseqidx: [
| ident      (* ssr plugin *)
| num      (* ssr plugin *)
]

ssrswap: [
| "first"      (* ssr plugin *)
| "last"      (* ssr plugin *)
]

ssrorelse: [
| "||" ltac_expr2      (* ssr plugin *)
]

ssrdotac: [
| ltac_expr3      (* ssr plugin *)
| ssrortacarg      (* ssr plugin *)
]

ssr_first: [
| ssr_first ssrintros_ne      (* ssr plugin *)
| "[" ltac_expr_list_or_opt "]"      (* ssr plugin *)
]

ssr_first_else: [
| ssr_first ssrorelse      (* ssr plugin *)
| ssr_first      (* ssr plugin *)
]

ssrgen: [
| ssrdocc cpattern      (* ssr plugin *)
| cpattern      (* ssr plugin *)
]

ssrdgens_tl: [
| "{" ident_list "}" cpattern ssrdgens_tl      (* ssr plugin *)
| "{" ident_list "}"      (* ssr plugin *)
| "{" ssrocc "}" cpattern ssrdgens_tl      (* ssr plugin *)
| "/" ssrdgens_tl      (* ssr plugin *)
| cpattern ssrdgens_tl      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrdgens: [
| ":" ssrgen ssrdgens_tl      (* ssr plugin *)
]

ssreqid: [
| ssreqpat      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssreqpat: [
| ident      (* ssr plugin *)
| "_"      (* ssr plugin *)
| "?"      (* ssr plugin *)
| "+"      (* ssr plugin *)
| ssrdocc "->"      (* ssr plugin *)
| ssrdocc "<-"      (* ssr plugin *)
| "->"      (* ssr plugin *)
| "<-"      (* ssr plugin *)
]

ssrarg: [
| ssrfwdview ssreqid ssrdgens ssrintros      (* ssr plugin *)
| ssrfwdview ssrclear ssrintros      (* ssr plugin *)
| ssreqid ssrdgens ssrintros      (* ssr plugin *)
| ssrclear_ne ssrintros      (* ssr plugin *)
| ssrintros_ne      (* ssr plugin *)
]

ssragen: [
| "{" ident_list "}" term      (* ssr plugin *)
| term      (* ssr plugin *)
]

ssragens: [
| "{" ident_list "}" term ssragens      (* ssr plugin *)
| "{" ident_list "}"      (* ssr plugin *)
| term ssragens      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrapplyarg: [
| ":" ssragen ssragens ssrintros      (* ssr plugin *)
| ssrclear_ne ssrintros      (* ssr plugin *)
| ssrintros_ne      (* ssr plugin *)
| ssrbwdview ":" ssragen ssragens ssrintros      (* ssr plugin *)
| ssrbwdview ssrclear ssrintros      (* ssr plugin *)
]

ssrexactarg: [
| ":" ssragen ssragens      (* ssr plugin *)
| ssrbwdview ssrclear      (* ssr plugin *)
| ssrclear_ne      (* ssr plugin *)
]

ssrcongrarg: [
| num constr ssrdgens      (* ssr plugin *)
| num constr      (* ssr plugin *)
| constr ssrdgens      (* ssr plugin *)
| constr      (* ssr plugin *)
]

ssrrwocc: [
| "{" ident_list_opt "}"      (* ssr plugin *)
| "{" ssrocc "}"      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrrule_ne: [
| term_alt      (* ssr plugin *)
| ssrsimpl_ne      (* ssr plugin *)
]

term_alt: [
| "/" term
| term      (* ssr plugin *)
| ssrsimpl_ne
]

ssrrule: [
| ssrrule_ne      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrpattern_squarep: [
| "[" rpattern "]"      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssrpattern_ne_squarep: [
| "[" rpattern "]"      (* ssr plugin *)
]

ssrrwarg: [
| "-" ssrmult ssrrwocc ssrpattern_squarep ssrrule_ne      (* ssr plugin *)
| "-/" term      (* ssr plugin *)
| ssrmult_ne ssrrwocc ssrpattern_squarep ssrrule_ne      (* ssr plugin *)
| "{" ident_list "}" ssrpattern_ne_squarep ssrrule_ne      (* ssr plugin *)
| "{" ident_list "}" ssrrule      (* ssr plugin *)
| "{" ssrocc "}" ssrpattern_squarep ssrrule_ne      (* ssr plugin *)
| "{" "}" ssrpattern_squarep ssrrule_ne      (* ssr plugin *)
| ssrpattern_ne_squarep ssrrule_ne      (* ssr plugin *)
| ssrrule_ne      (* ssr plugin *)
]

ssrrwarg_list: [
| ssrrwarg_list ssrrwarg
| ssrrwarg
]

ssrunlockarg: [
| "{" ssrocc "}" term      (* ssr plugin *)
| term      (* ssr plugin *)
]

ssrunlockarg_list_opt: [
| ssrunlockarg_list_opt ssrunlockarg
| empty
]

ssrsufffwd: [
| ssripats ssrbinder_list_opt ":" term ssrhint      (* ssr plugin *)
]

ssrwlogfwd: [
| ":" ssrwgen_list_opt "/" term      (* ssr plugin *)
]

ssrwgen_list_opt: [
| ssrwgen_list_opt ssrwgen
| empty
]

ssr_idcomma: [
| empty      (* ssr plugin *)
| ident_alt ","      (* ssr plugin *)
]

ident_alt: [
| ident
| "_"
]

ssr_rtype: [
| "return" term100      (* ssr plugin *)
]

ssr_dpat: [
| pattern "in" pattern ssr_rtype      (* ssr plugin *)
| pattern ssr_rtype      (* ssr plugin *)
| pattern      (* ssr plugin *)
]

ssr_dthen: [
| ssr_dpat "then" term      (* ssr plugin *)
]

ssr_else: [
| "else" term      (* ssr plugin *)
]

ssr_search_item: [
| string      (* ssr plugin *)
| string "%" ident      (* ssr plugin *)
| constr      (* ssr plugin *)
]

ssr_search_arg: [
| "-" ssr_search_item ssr_search_arg      (* ssr plugin *)
| ssr_search_item ssr_search_arg      (* ssr plugin *)
| empty      (* ssr plugin *)
]

ssr_modlocs: [
| empty      (* ssr plugin *)
| "in" modloc_list      (* ssr plugin *)
]

modloc_list: [
| modloc_list modloc
| modloc
]

modloc: [
| "-" qualid      (* ssr plugin *)
| qualid      (* ssr plugin *)
]

ssrhintref: [
| constr      (* ssr plugin *)
| constr "|" num      (* ssr plugin *)
]

ssrviewpos: [
| "for" "move" "/"      (* ssr plugin *)
| "for" "apply" "/"      (* ssr plugin *)
| "for" "apply" "/" "/"      (* ssr plugin *)
| "for" "apply" "//"      (* ssr plugin *)
| empty      (* ssr plugin *)
]

rpattern: [
| term      (* ssrmatching plugin *)
| "in" term      (* ssrmatching plugin *)
| term "in" term      (* ssrmatching plugin *)
| "in" term "in" term      (* ssrmatching plugin *)
| term "in" term "in" term      (* ssrmatching plugin *)
| term "as" term "in" term      (* ssrmatching plugin *)
]

lcpattern: [
| "Qed" term      (* ssrmatching plugin *)
| term      (* ssrmatching plugin *)
]

