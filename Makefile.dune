# -*- mode: makefile -*-
# Dune Makefile for Coq

.PHONY: help voboot states world watch check quickbyte quickopt test-suite release apidoc ocheck ireport clean bootstrap bootstrap-build

# use DUNEOPT=--display=short for a more verbose build
# DUNEOPT=--display=short

BUILD_CONTEXT=_build/default

help:
	@echo "Welcome to Coq's Dune-based build system. Regular targets are:"
	@echo "  - states:  build a minimal functional coqtop"
	@echo "  - world:   build all binaries and libraries"
	@echo "  - watch:   build all binaries and libraries [continuous build]"
	@echo "  - check:   build all ML files as fast as possible [requires Dune >= 1.5.0]"
	@echo "  - quickbyte:  build main ML files [coqtop + plugins + ide + printers] using the bytecode compiler"
	@echo "  - quickopt:   build main ML files [coqtop + plugins + ide + printers] using the optimizing compiler"
	@echo "  - test-suite: run Coq's test suite"
	@echo "  - release: build Coq in release mode"
	@echo "  - apidoc:  build ML API documentation"
	@echo "  - ocheck:  build for all supported OCaml versions [requires OPAM]"
	@echo "  - ireport: build with optimized flambda settings and emit an inline report"
	@echo "  - clean:   remove build directory and autogenerated files"
	@echo "  - help:    show this message"
	@echo ""
	@echo "Boostrap targets:"
	@echo "  - bootstrap:       compile a local version of Dune in _dune"
	@echo "  - bootstrap-build: compile Coq using a local version of Dune"

voboot:
	dune build $(DUNEOPT) @vodeps
	dune exec coq_dune $(BUILD_CONTEXT)/.vfiles.d

states: voboot
	dune build $(DUNEOPT) theories/Init/Prelude.vo

world: voboot
	dune build $(DUNEOPT) @install

watch: voboot
	dune build $(DUNEOPT) @install -w

check: voboot
	dune build $(DUNEOPT) @check

COQTOP_FILES=ide/idetop.bc ide/coqide_main.bc checker/coqchk.bc
PLUGIN_FILES=$(wildcard plugins/*/*.mlpack)
PRINTER_FILES=dev/top_printers.cma
QUICKBYTE_TARGETS=$(COQTOP_FILES) $(PLUGIN_FILES:.mlpack=.cma) $(PRINTER_FILES) topbin/coqtop_byte_bin.bc
QUICKOPT_TARGETS=$(COQTOP_FILES:.bc=.exe) $(PLUGIN_FILES:.mlpack=.cmxs) $(PRINTER_FILES:.cma=.cmxa) topbin/coqtop_bin.exe

quickbyte: voboot
	dune build $(DUNEOPT) $(QUICKBYTE_TARGETS)

quickopt: voboot
	dune build $(DUNEOPT) $(QUICKOPT_TARGETS)

test-suite: voboot
	dune runtest $(DUNEOPT)

release: voboot
	dune build $(DUNEOPT) -p coq

apidoc: voboot
	dune build $(DUNEOPT) @doc

ocheck: voboot
	dune build $(DUNEOPT) @install --workspace=dev/dune-workspace.all

ireport:
	dune clean
	dune build $(DUNEOPT) @vodeps --profile=ireport
	dune exec coq_dune $(BUILD_CONTEXT)/.vfiles.d --profile=ireport
	dune build $(DUNEOPT) @install --profile=ireport

clean:
	dune clean

# Dune bootstrap targets:

DUNE_BOOT_VER=1.5.1
DUNE_TBZ=dune-$(DUNE_BOOT_VER).tbz
DUNE_BOOT_PATH=_dune/dune-$(DUNE_BOOT_VER)/_build/install/default/bin
bootstrap:
	mkdir -p _dune
	( cd _dune && wget https://github.com/ocaml/dune/releases/download/$(DUNE_BOOT_VER)/$(DUNE_TBZ) && tar xvfj $(DUNE_TBZ) )
	( cd _dune/dune-$(DUNE_BOOT_VER)/ && make release )
	@echo "A Local version of Dune is ready to be used, add $(DUNE_BOOT_PATH) to your PATH"

bootstrap-build: bootstrap
	$(DUNE_BOOT_PATH)/dune build $(DUNEOPT) @vodeps
	$(DUNE_BOOT_PATH)/dune exec coq_dune $(BUILD_CONTEXT)/.vfiles.d
	$(DUNE_BOOT_PATH)/dune build @install

# Other common dev targets
#
# dune build coq.install
# dune build ide/coqide.install

# Packaging / OPAM targets:
#
# dune -p coq @install
# dune -p coqide @install
