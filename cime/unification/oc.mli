(***************************************************************************

This module provides a generalized occur-check based on the topological sort.

CiME Project - Démons research team - LRI - Université Paris XI

$Id$

***************************************************************************)


open Variables
open Gen_terms

type cycle = 
     Cycle of var_id list
  |  No_cycle of var_id list

         
(*

  [(occur_check_without_var_var list_of_equations)] check that there
  is no cycle in the occurrence graph generated by the
  [list_of_equations], that is returns
  \begin{itemize}
  \item [No_cycle list_of_vars] when there is no cycle in the graph;
  in this case, the (total) ordering of the variables in the
  [list_of_vars] is compatible with the (partial) ordering induced by
  the graph,
  \item [Cycle list_of_vars] when there is a cycle in the graph going
  through the nodes [list_of_vars].
  \end{itemize}

  It is assumed that [list_of_equations] does not contains any equation 
  between variables.

*)

val occur_check_without_var_var : 
  'symbol #Signatures.signature -> (*i Variables.user_variables -> i*)
    ('symbol term * 'symbol term) list -> cycle


(* 

   A call to [(instanciate_when_no_cycle list_of_vars list_of_equations)] 
   assumes that
  \begin{itemize}
  \item there is no cycle in the occur-check graph generated by the
  [list_of_equations],
  \item and that [list_of_vars] provides a total ordering compatible
  with the occur-check graph.
  \end{itemize}
  This function takes [list_of_equations] as a DAG-solved form, in
  particular all the equations are of the form [variable = term], and
  it returns an equivalent solved form.

*)

val instanciate_when_no_cycle : 
  var_id list -> ('symbol term * 'symbol term) list 
    -> ('symbol term * 'symbol term) list


(*

  A call to [(occur_check list_of_eqs_var_var list_of_equations)]
  assumes that 
  \begin{itemize}
  \item [list_of_eqs_var_var] contains only equations between variables, 
  \item [list_of_equations] contains only equations between a variable 
  and a non-variable term,
  \item and the {\bf Coalesce} rule does not apply on the union of
  these two sets of equations.
  \end{itemize}

  It returns either a failure when there is a cycle in the occur-check
  graph or a list of equations which is a solved form for the union of
  [list_of_eqs_var_var] and [list_of_equations].

*)

val occur_check : 
  'symbol #Signatures.signature -> (*i Variables.user_variables -> i*)
    (unit, var_id) VarMap.t -> ('symbol term * 'symbol term) list ->
      ('symbol term * 'symbol term) list




