open Format

let fmt = ref Format.std_formatter

let write_lit name l = fprintf !fmt "let %s = %s@\n" name l
let write_int name i = fprintf !fmt "let %s = %d@\n" name i
let write_bool name b = fprintf !fmt "let %s = %B@\n" name b
let write_string name str = fprintf !fmt "let %s = %S@\n" name str

let dummy = "DEAFBEEF"

let coq_version = "8.10+alpha"

(* Use dune configurator? *)
module CFlags = struct
  let cflags_dflt = "-Wall -Wno-unused -g -O2 -std=c99 -fasm"
  let cflags_sse2 = "-msse2 -mfpmath=sse"

  let cflags = cflags_dflt ^ " " ^ cflags_sse2

(* let cflags, sse2_math =
    let _, slurp =
      (* Test SSE2_MATH support <https://stackoverflow.com/a/45667927> *)
      tryrun camlexec.find
        ["ocamlc"; "-ccopt"; cflags_dflt ^ " -march=native -dM -E " ^ cflags_sse2;
         "-c"; coqtop/"dev/header.c"] in  (* any file *)
    if List.exists (fun line -> starts_with line "#define __SSE2_MATH__ 1") slurp
    then (cflags_dflt ^ " " ^ cflags_sse2, true)
    else (cflags_dflt, false) *)
end

type args_val =
  { prefix : string ref
  ; bytecode_compiler : bool ref
  ; native_compiler : bool ref
  }

let write_config_ml args ffmt =
  fmt := ffmt;
  (* Useful *)
  write_string "coqlib" !(args.prefix);
  write_bool "bytecode_compiler" !(args.bytecode_compiler);
  write_bool "native_compiler" !(args.native_compiler);

  (* Used in extraction, coq_makefile: could be removed *)
  write_string "ocamlfind" "ocamlfind";
  write_string "caml_flags"
    "-thread -rectypes $(shell ocamlfind query -separator \\  -r -i-format coq.plugins.ltac)";

  (* Metadata: should be generated by Dune *)
  write_string "version" coq_version;
  write_string "caml_version" dummy;
  write_string "date" dummy;
  write_string "compile_date" dummy;

  (* Fixed among versions, don't belong to configure *)
  write_int "vo_magic_number" 0;
  write_int "state_magic_number" 0;
  write_string "wwwcoq" "http://coq.inria.fr/";

  (* Dummy *)
  write_bool "local" false;
  write_string "configdir" dummy;
  write_string "datadir" dummy;
  write_string "docdir" dummy;
  write_string "coqlibsuffix" dummy;
  write_string "configdirsuffix" dummy;
  write_string "datadirsuffix" dummy;
  write_string "docdirsuffix" dummy;
  write_string "arch" dummy;
  write_bool "arch_is_win32" false;
  write_lit "caml_version_nums" "[]";
  write_lit "all_src_dirs" "[]";
  write_string "exec_extension" dummy;
  write_string "browser" dummy;
  write_lit "gtk_platform" "`X11";
  write_bool "has_natdynlink" true;
  write_string "wwwrefman" dummy;
  write_string "wwwbugtracker" dummy;
  write_string "wwwstdlib" dummy;
  write_string "localwwwrefman" dummy;
  fprintf !fmt "%!";
  ()

let write_config_py fmt =
  fprintf fmt "version = %S@\n%!" coq_version

let args_val =
  { prefix = ref "/usr/local/"
  ; bytecode_compiler = ref true
  ; native_compiler = ref true
  }

let args_def =
  [ "--prefix", Arg.Set_string args_val.prefix, "prefix to install"
  ; "--disable-native", Arg.Set args_val.native_compiler, "disable native compiler"
  ; "--disable-bytecode", Arg.Set args_val.bytecode_compiler, "disable bytecode compiler"
  ]

let write_file file wfun =
  let file_out = open_out file in
  let fmt = Format.formatter_of_out_channel file_out in
  wfun fmt;
  Format.pp_print_flush fmt ();
  close_out file_out

let _ =
  Arg.parse args_def (fun _ -> ()) "Coq Mini Configure";

  write_file "coq_config.ml"  (write_config_ml args_val);

  write_file "coq_config.py" write_config_py;

  write_file "dune.c_flags" (fun fmt -> fprintf fmt "(%s)" CFlags.cflags);

  ()
